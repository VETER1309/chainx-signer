{"version":3,"sources":["shared/useClickOutside.js","shared/fetch.js","shared/updateNodeStatus.js","shared/chainx.js","store/reducers/testSlice.js","store/reducers/constants.js","store/reducers/settingSlice.js","store/utils.js","store/reducers/accountSlice.js","store/reducers/nodeSlice.js","store/reducers/txSlice.js","store/reducers/statusSlice.js","store/reducers/intentionSlice.js","store/reducers/tradeSlice.js","store/reducers/index.js","store/index.js","error.js","constants.js","services/ApiService.js","services/socketService.js","shared/signHelper.js","components/Icon/index.js","pages/Home.js","components/DotInCenterStr/index.js","pages/Header/index.js","components/StaticWarning/index.js","components/ErrorMessage/index.js","components/WarningMessage/index.js","components/NameAndPassword/index.js","pages/CreateAccount/index.js","pages/ImportAccount/index.js","shared/extensionExtrinsic.js","shared/toPrecision.js","shared/constants.js","pages/RequestSign/Transfer.js","pages/RequestSign/CommonTx.js","pages/RequestSign/Trade.js","pages/RequestSign/AssetsProcess.js","pages/RequestSign/Staking.js","pages/RequestSign/index.js","pages/ShowPrivateKey/index.js","pages/EnterPassword/index.js","pages/NodeAction/index.js","pages/NodeAction/NodeError.js","pages/App.js","index.js","assets/extension_logo.svg","assets/testnet.svg","assets/switch.svg","assets/warning.png","assets/loading.gif"],"names":["useOutsideClick","ref","callback","handleClick","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","fetchFromWs","startTime","endTime","url","method","params","timeOut","id","Number","Date","now","Math","random","toString","substr","message","JSON","stringify","jsonrpc","request","Promise","resolve","reject","ws","WebSocket","onmessage","m","data","parse","result","wastTime","close","err","onopen","send","onerror","race","resovle","setTimeout","INIT_NODES","name","TESTNET_INIT_NODES","isCurrentNodeInit","node","isTestNet","some","item","getDelay","nodeList","chainId","dispatch","setNodeDelay","a","async","forEach","then","delay","catch","console","log","chainx","setChainx","nodeUrl","Chainx","isRpcReady","getChainx","replaceBTC","token","sleep","time","testSlice","createSlice","initialState","reducers","setTest","reducer","state","action","payload","text","prepare","actions","CHAINX_MAIN","CHAINX_TEST","events","chainxNetwork","defaultSettingInitialState","version","network","window","settingStore","get","settingSlice","setNetwork","pre","set","sockets","broadcastEvent","from","to","networkSelector","setting","isTestNetSelector","createSelector","extractAccountInfo","account","_","pick","accountStore","chainxMainNetAccounts","currentChainXMainNetAccount","chainxTestNetAccounts","currentChainxTestNetAccount","findTargetAccounts","targetAccounts","Error","accountSlice","addAccount","address","keystore","findIndex","push","setCurrentChainXMainNetAccount","find","removeAccount","index","splice","setCurrentChainXTestNetAccount","chainxAccountsSelector","mainNetAccounts","testNetAccounts","currentChainxAccountSelector","mainNetAccount","testNetAccount","mainNetInitNodes","testNetInitNodes","defaultNodeInitialState","chainxMainNetNodes","currentChainXMainNetNode","chainxTestNetNodes","currentChainXTestNetNode","testnetNodesDelay","mainnetNodesDelay","nodeStore","findTargetNodes","targetNodes","nodeSlice","addNode","n","newNode","includes","nodes","removeNode","length","setCurrentChainXMainNetNode","setCurrentChainXTestNetNode","setCurrentChainXNode","chainxNodesSelector","mainNetNodes","testNetNodes","chainxNodesDelaySelector","currentChainxNodeSelector","mainNetNode","testNetNode","txSlice","toSign","setToSign","clearToSign","toSignSelector","tx","statusSlice","loading","initLoading","homeLoading","setLoading","setInitLoading","setHomeLoading","intentionSlice","intentions","setIntentions","getStake","stake","intentionsSelector","tradeSlice","pairs","fee","setPairs","setFee","feeSelector","trade","pairsSelector","test","testReducer","status","statusReducer","store","configureStore","rootReducer","codes","methods","getAccount","getState","getNode","service","ApiService","this","emit","origin","error","code","sign","needBroadcast","currentAccount","Extrinsic","dataId","activateWindow","getSignRequest","pass","acceleration","emitInfo","event","socketsEvents","api","extrinsic","SubmittableExtrinsic","fromKeyStore","query","system","accountNonce","publicKey","nonce","signedExtrinsic","toNumber","blockHash","genesisHash","hash","toHex","hex","Icon","props","className","style","Home","useRef","useState","showAccountAction","setShowAccountAction","useSelector","copySuccess","setCopySuccess","setCopyEvent","ClipboardJS","on","operateAccount","type","history","pathname","onClick","data-clipboard-text","src","logo","alt","DotInCenterStr","simpleStr","value","slice","getDotInCenterStr","withRouter","refNodeList","refAccountList","showNodeListArea","setShowNodeListArea","showAccountArea","setShowAccountArea","copyText","setCopyText","accounts","currentNode","nodesDelay","useDispatch","getDelayClass","testNetImg","location","replace","toLowerCase","map","key","finally","split","stopPropagation","nativeEvent","stopImmediatePropagation","nodeInfo","switchImg","data-tip","data-for","effect","globalEventOff","afterHide","StaticWarning","title","desc","warningIcon","ErrorMessage","msg","NameAndPassword","secret","onSuccess","repass","obj","setObj","errMsg","setErrMsg","Account","setNet","sameAccount","create","encrypt","required","onChange","placeholder","onKeyPress","CreateAccount","currentStep","setCurrentStep","newMnemonic","mnemonic","mnemonicList","Array","fill","wordSelectedList","setWordSelectedList","shuffle","shuffleMnemonicList","validateMnemonicList","setValidateMnemonicList","mnemonicWords","clearErrMsg","wordSelected","wordIndex","indexOf","replaceWord","reverse","s","join","ImportAccount","currentTabIndex","setCurrentTabIndex","pk","setPk","setMnemonicList","titleList","checkStep1","trim","meta","args","entries","require","toPrecision","precision","showPrecision","BigNumber","dividedBy","pow","toFixed","module","argsWithName","arg","getPrecision","assets","currency","getPublicKey","decodeAddress","RequestSign","setPass","currentGas","setCurrentGas","setAcceleration","txPanel","setTxPanel","Object","assign","newQuery","setNewQuery","parseQuery","fetchRelevantInfo","getIntentions","resp","getTradingPairs","asset","getWithdrawalLimitByToken","ex","stringCamelCase","methodName","argsArr","parseData","updateTxPanel","call","Uint8Array","values","submittable","_currentGas","getFeeSync","getCurrentGas","_txPanel","Transfer","Trade","AssetsProcess","Staking","CommonTx","removeCurrentSign","onbeforeunload","defaultValue","v","aria-labelledby","valueLabelDisplay","step","marks","label","min","max","size","ShowPrivateKey","EnterPassword","exportPk","password","privateKey","_removeAccount","enter","AddNode","setName","setUrl","deleteNode","NodeError","wallet","socketResponse","handle","handlePairedResponse","initialize","ReactDOM","render","getSetting","Fragment","spinner","exact","path","component","NodeAction","getElementById","exports"],"mappings":"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","file":"static/js/main.df8b25a7.chunk.js","sourcesContent":["import { useEffect } from 'react'\n\nconst useOutsideClick = (ref, callback) => {\n  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick)\n\n    return () => {\n      document.removeEventListener('click', handleClick)\n    }\n  })\n}\n\nexport default useOutsideClick\n","const fetchFromWs = ({ url, method, params = [], timeOut = 5000 }) => {\n  const id = Number(\n    Date.now() +\n      Math.random()\n        .toString()\n        .substr(2, 3)\n  ).toString(36)\n  const message = JSON.stringify({ id, jsonrpc: '2.0', method, params })\n  let startTime\n  let endTime\n  const request = () =>\n    new Promise((resolve, reject) => {\n      const ws = new WebSocket(url)\n      ws.onmessage = m => {\n        try {\n          const data = JSON.parse(m.data)\n          if (data.id === id) {\n            endTime = Date.now()\n            resolve({\n              data: data.result,\n              wastTime: endTime - startTime\n            })\n            ws.close()\n          }\n        } catch (err) {\n          reject(err)\n        }\n      }\n      ws.onopen = () => {\n        startTime = Date.now()\n        ws.send(message)\n      }\n      ws.onerror = err => {\n        ws.close()\n        reject(err)\n      }\n    })\n  if (timeOut) {\n    return Promise.race([\n      request(),\n      new Promise((resovle, reject) => {\n        setTimeout(() => {\n          reject('请求超时')\n        }, timeOut)\n      })\n    ])\n  } else {\n    return request()\n  }\n}\n\nexport default fetchFromWs\n","import fetchFromWs from './fetch'\n\nconst TIMEOUT = 7000\nconst INIT_NODES = [\n  {\n    name: 'w1.org',\n    url: 'wss://w1.chainx.org/ws'\n  },\n  {\n    name: 'w2.org',\n    url: 'wss://w2.chainx.org/ws'\n  },\n  {\n    name: 'HashQuark',\n    url: 'wss://chainx.hashquark.io'\n  },\n  {\n    name: 'BuildLinks',\n    url: 'wss://chainx.buildlinks.org'\n  },\n  {\n    name: 'w1.cn',\n    url: 'wss://w1.chainx.org.cn/ws'\n  }\n]\n\nconst TESTNET_INIT_NODES = [\n  {\n    name: 'testnet.w1.org.cn',\n    url: 'wss://testnet.w1.chainx.org.cn/ws'\n  }\n]\n\nexport const isCurrentNodeInit = (node, isTestNet) => {\n  let result = false\n  if (isTestNet) {\n    result = TESTNET_INIT_NODES.some(item => item.url === node.url)\n  } else {\n    result = INIT_NODES.some(item => item.url === node.url)\n  }\n  return result\n}\n\nconst getDelay = async (nodeList, chainId, dispatch, setNodeDelay) => {\n  nodeList.forEach(item => {\n    fetchFromWs({\n      url: item.url,\n      method: 'chain_getBlock',\n      timeOut: TIMEOUT\n    })\n      .then((result = {}) => {\n        if (result.data) {\n          dispatch(\n            setNodeDelay({ chainId, url: item.url, delay: result.wastTime })\n          )\n        }\n      })\n      .catch(err => {\n        console.log('catched', err)\n        dispatch(setNodeDelay({ chainId, url: item.url, delay: 'timeout' }))\n      })\n  })\n}\n\nexport default getDelay\n","import Chainx from 'chainx.js'\n\nlet chainx = null\n\nexport const setChainx = async nodeUrl => {\n  chainx = new Chainx(nodeUrl)\n  await chainx.isRpcReady()\n  return chainx\n}\n\nexport const getChainx = () => {\n  return chainx\n}\n\nexport const replaceBTC = token => {\n  return token === 'BTC' ? 'X-BTC' : token\n}\n\nexport const sleep = time => {\n  return new Promise(resolve => {\n    setTimeout(resolve, time)\n  })\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst testSlice = createSlice({\n  name: 'test',\n  initialState: 'test',\n  reducers: {\n    setTest: {\n      reducer(state, action) {\n        const { text } = action.payload\n        return text\n      },\n      prepare(text) {\n        return { payload: { text } }\n      }\n    }\n  }\n})\n\nexport const { setTest } = testSlice.actions\n\nexport default testSlice.reducer\n","export const CHAINX_MAIN = 'chainx-mainnet'\nexport const CHAINX_TEST = 'chainx-testnet'\nexport const ACCOUNT_STORE_KEY = 'accounts'\nexport const NODE_STORE_KEY = 'nodes'\nexport const SETTING_STORE_KEY = 'settings'\nexport const events = {\n  ACCOUNT_CHANGE: 'account-change',\n  NODE_CHANGE: 'node-change',\n  NETWORK_CHANGE: 'network-change',\n  TX_STATUS: 'tx-status'\n}\n","import { createSlice, createSelector } from '@reduxjs/toolkit'\nimport {\n  CHAINX_MAIN,\n  CHAINX_TEST,\n  events,\n  SETTING_STORE_KEY\n} from './constants'\n\nexport const chainxNetwork = {\n  MAIN: CHAINX_MAIN,\n  TEST: CHAINX_TEST\n}\n\nconst defaultSettingInitialState = {\n  version: 0,\n  network: chainxNetwork.MAIN\n}\n\nlet initialState =\n  window.settingStore.get(SETTING_STORE_KEY) || defaultSettingInitialState\n\nconst settingSlice = createSlice({\n  name: 'setting',\n  initialState,\n  reducers: {\n    setNetwork(state, { payload }) {\n      const pre = state.network\n      state.network = payload\n      window.settingStore.set(SETTING_STORE_KEY, state)\n\n      if (pre !== payload) {\n        window.sockets.broadcastEvent(events.NETWORK_CHANGE, {\n          from: pre,\n          to: payload\n        })\n      }\n    }\n  }\n})\n\nexport const { setNetwork } = settingSlice.actions\nexport const networkSelector = state => state.setting.network\n\nexport const isTestNetSelector = createSelector(networkSelector, network => {\n  return network === chainxNetwork.TEST\n})\n\nexport default settingSlice.reducer\n","import _ from 'lodash'\n\nexport function extractAccountInfo(account) {\n  if (!account) {\n    return\n  }\n\n  return _.pick(account, ['name', 'address'])\n}\n","import { createSlice, createSelector } from '@reduxjs/toolkit'\nimport {\n  ACCOUNT_STORE_KEY,\n  CHAINX_MAIN,\n  CHAINX_TEST,\n  events\n} from './constants'\nimport { chainxNetwork, networkSelector } from './settingSlice'\nimport { extractAccountInfo } from '../utils'\n\nconst defaultAccountInitialState = {\n  version: 0,\n  chainxMainNetAccounts: [],\n  currentChainXMainNetAccount: null,\n  chainxTestNetAccounts: [],\n  currentChainxTestNetAccount: null\n}\n\nlet initialState =\n  window.accountStore.get(ACCOUNT_STORE_KEY) || defaultAccountInitialState\n\nfunction findTargetAccounts(state, chainId) {\n  let targetAccounts\n  if (CHAINX_MAIN === chainId) {\n    targetAccounts = state.chainxMainNetAccounts\n  } else if (CHAINX_TEST === chainId) {\n    targetAccounts = state.chainxTestNetAccounts\n  } else {\n    throw new Error(`Invalid chainId: ${chainId}`)\n  }\n\n  return targetAccounts\n}\n\nconst accountSlice = createSlice({\n  name: 'account',\n  initialState,\n  reducers: {\n    addAccount(\n      state,\n      {\n        payload: {\n          chainId,\n          account: { name, address, keystore }\n        }\n      }\n    ) {\n      const targetAccounts = findTargetAccounts(state, chainId)\n\n      if (targetAccounts.findIndex(a => a.address === address) >= 0) {\n        return\n      }\n\n      const account = { name, address, keystore }\n      targetAccounts.push(account)\n\n      let pre\n      if (CHAINX_MAIN === chainId) {\n        pre = state.currentChainXMainNetAccount\n        state.currentChainXMainNetAccount = account\n      } else if (CHAINX_TEST === chainId) {\n        pre = state.currentChainxTestNetAccount\n        state.currentChainxTestNetAccount = account\n      }\n      window.accountStore.set(ACCOUNT_STORE_KEY, state)\n\n      window.sockets.broadcastEvent(events.ACCOUNT_CHANGE, {\n        from: extractAccountInfo(pre),\n        to: extractAccountInfo(account)\n      })\n\n      // TODO: 处理存在相同address的情况\n    },\n    setCurrentChainXMainNetAccount(state, { payload: { address } }) {\n      const target = state.chainxMainNetAccounts.find(\n        a => a.address === address\n      )\n      if (!target) {\n        throw new Error(`No ChainX mainnet account with address ${address}`)\n      }\n\n      const pre = state.currentChainXMainNetAccount\n      state.currentChainXMainNetAccount = target\n      window.sockets.broadcastEvent(events.ACCOUNT_CHANGE, {\n        from: extractAccountInfo(pre),\n        to: extractAccountInfo(target)\n      })\n    },\n    removeAccount(state, { payload: { chainId, address } }) {\n      const targetAccounts = findTargetAccounts(state, chainId)\n\n      const index = targetAccounts.findIndex(a => a.address === address)\n      if (index < 0) {\n        return\n      }\n\n      targetAccounts.splice(index, 1)\n      let pre, current\n      if (chainId === CHAINX_MAIN) {\n        pre = state.currentChainXMainNetAccount\n        state.currentChainXMainNetAccount = targetAccounts[0] || null\n        current = targetAccounts[0] || null\n      } else if (chainId === CHAINX_TEST) {\n        pre = state.currentChainxTestNetAccount\n        state.currentChainxTestNetAccount = targetAccounts[0] || null\n        current = targetAccounts[0] || null\n      }\n\n      window.accountStore.set(ACCOUNT_STORE_KEY, state)\n      window.sockets.broadcastEvent(events.ACCOUNT_CHANGE, {\n        from: extractAccountInfo(pre),\n        to: extractAccountInfo(current)\n      })\n\n      // TODO: 处理不存在address的情况\n    },\n    setCurrentChainXTestNetAccount(state, { payload: { address } }) {\n      const target = state.chainxTestNetAccounts.find(\n        a => a.address === address\n      )\n      if (!target) {\n        throw new Error(`No ChainX testnet account with address ${address}`)\n      }\n\n      const pre = state.currentChainXMainNetAccount\n      state.currentChainxTestNetAccount = target\n      window.sockets.broadcastEvent(events.ACCOUNT_CHANGE, {\n        from: extractAccountInfo(pre),\n        to: extractAccountInfo(target)\n      })\n    }\n  }\n})\n\nexport const {\n  addAccount,\n  removeAccount,\n  setCurrentChainXMainNetAccount,\n  setCurrentChainXTestNetAccount\n} = accountSlice.actions\n\nexport const chainxMainNetAccountsSelector = state =>\n  state.account.chainxMainNetAccounts\nexport const chainxTestNetAccountsSelector = state =>\n  state.account.chainxTestNetAccounts\nexport const currentChainXMainNetAccountSelector = state =>\n  state.account.currentChainXMainNetAccount\nexport const currentChainxTestNetAccountSelector = state =>\n  state.account.currentChainxTestNetAccount\n\nexport const chainxAccountsSelector = createSelector(\n  networkSelector,\n  chainxMainNetAccountsSelector,\n  chainxTestNetAccountsSelector,\n  (network, mainNetAccounts, testNetAccounts) => {\n    if (network === chainxNetwork.TEST) {\n      return testNetAccounts\n    } else if (network === chainxNetwork.MAIN) {\n      return mainNetAccounts\n    }\n  }\n)\n\nexport const currentChainxAccountSelector = createSelector(\n  networkSelector,\n  currentChainXMainNetAccountSelector,\n  currentChainxTestNetAccountSelector,\n  (network, mainNetAccount, testNetAccount) => {\n    if (network === chainxNetwork.TEST) {\n      return testNetAccount\n    } else if (network === chainxNetwork.MAIN) {\n      return mainNetAccount\n    }\n  }\n)\n\nexport default accountSlice.reducer\n","import { createSelector, createSlice } from '@reduxjs/toolkit'\nimport { CHAINX_MAIN, CHAINX_TEST, events, NODE_STORE_KEY } from './constants'\nimport { chainxNetwork, networkSelector } from './settingSlice'\n\nexport const mainNetInitNodes = [\n  {\n    name: 'w1.org',\n    url: 'wss://w1.chainx.org/ws'\n  },\n  {\n    name: 'w2.org',\n    url: 'wss://w2.chainx.org/ws'\n  },\n  {\n    name: 'HashQuark',\n    url: 'wss://chainx.hashquark.io'\n  },\n  {\n    name: 'BuildLinks',\n    url: 'wss://chainx.buildlinks.org'\n  },\n  {\n    name: 'w1.cn',\n    url: 'wss://w1.chainx.org.cn/ws'\n  }\n]\n\nexport const testNetInitNodes = [\n  {\n    name: 'testnet.w1.org.cn',\n    url: 'wss://testnet.w1.chainx.org.cn/ws'\n  }\n]\n\nconst defaultNodeInitialState = {\n  version: 0,\n  chainxMainNetNodes: mainNetInitNodes,\n  currentChainXMainNetNode: mainNetInitNodes[0],\n  chainxTestNetNodes: testNetInitNodes,\n  currentChainXTestNetNode: testNetInitNodes[0],\n  testnetNodesDelay: {},\n  mainnetNodesDelay: {}\n}\n\nconst initialState =\n  window.nodeStore.get(NODE_STORE_KEY) || defaultNodeInitialState\n\nfunction findTargetNodes(state, chainId) {\n  let targetNodes\n  if (CHAINX_MAIN === chainId) {\n    targetNodes = state.chainxMainNetNodes\n  } else if (CHAINX_TEST === chainId) {\n    targetNodes = state.chainxTestNetNodes\n  } else {\n    throw new Error(`Invalid chainId: ${chainId}`)\n  }\n\n  return targetNodes\n}\n\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState,\n  reducers: {\n    addNode(\n      state,\n      {\n        payload: {\n          chainId,\n          node: { name, url }\n        }\n      }\n    ) {\n      const targetNodes = findTargetNodes(state, chainId)\n      const target = targetNodes.find(n => n.url === url)\n      if (target) {\n        return\n      }\n\n      const newNode = { name, url }\n      targetNodes.push(newNode)\n      let pre\n      if (CHAINX_MAIN === chainId) {\n        pre = state.currentChainXMainNetNode\n        state.currentChainXMainNetNode = newNode\n      } else if (CHAINX_TEST === chainId) {\n        pre = state.currentChainXTestNetNode\n        state.currentChainXTestNetNode = newNode\n      }\n\n      if ([CHAINX_MAIN, CHAINX_TEST].includes(chainId)) {\n        window.sockets.broadcastEvent(events.NODE_CHANGE, {\n          from: pre,\n          to: newNode\n        })\n      }\n\n      window.nodeStore.set(NODE_STORE_KEY, state)\n    },\n    setNodeDelay(state, { payload: { chainId, url, delay } }) {\n      let nodes = state.testnetNodesDelay\n      if (CHAINX_MAIN === chainId) {\n        nodes = state.mainnetNodesDelay\n      }\n      nodes[url] = delay\n      window.nodeStore.set(NODE_STORE_KEY, state)\n    },\n    removeNode(state, { payload: { chainId, url } }) {\n      const targetNodes = findTargetNodes(state, chainId)\n      if (targetNodes.length <= 1) {\n        return\n      }\n\n      const index = targetNodes.findIndex(n => n.url === url)\n      if (index < 0) {\n        return\n      }\n\n      targetNodes.splice(index, 1)\n\n      let pre = null\n      if (CHAINX_MAIN === chainId) {\n        pre = state.currentChainXMainNetNode\n        state.currentChainXMainNetNode = targetNodes[0] || null\n      } else if (CHAINX_TEST === chainId) {\n        pre = state.currentChainXTestNetNode\n        state.currentChainXTestNetNode = targetNodes[0] || null\n      }\n\n      if ([CHAINX_MAIN, CHAINX_TEST].includes(chainId)) {\n        window.sockets.broadcastEvent(events.NODE_CHANGE, {\n          from: pre,\n          to: targetNodes[0] || null\n        })\n      }\n\n      window.nodeStore.set(NODE_STORE_KEY, state)\n\n      // TODO: 处理不存在url的情况\n    },\n    setCurrentChainXMainNetNode(state, { payload: { url } }) {\n      const target = state.chainxMainNetNodes.find(n => n.url === url)\n      if (!target) {\n        throw new Error(`No ChainX mainnet node with url ${url}`)\n      }\n\n      const pre = state.currentChainXTestNetNode\n      state.currentChainXMainNetNode = target\n      window.nodeStore.set(NODE_STORE_KEY, state)\n      window.sockets.broadcastEvent(events.NODE_CHANGE, {\n        from: pre,\n        to: target\n      })\n    },\n    setCurrentChainXTestNetNode(state, { payload: { url } }) {\n      const target = state.chainxTestNetNodes.find(n => n.url === url)\n      if (!target) {\n        throw new Error(`No ChainX testnet node with url ${url}`)\n      }\n\n      const pre = state.currentChainXTestNetNode\n      state.currentChainXTestNetNode = target\n      window.nodeStore.set(NODE_STORE_KEY, state)\n      window.sockets.broadcastEvent(events.NODE_CHANGE, {\n        from: pre,\n        to: target\n      })\n    },\n    setCurrentChainXNode(state, { payload: { chainId, url } }) {\n      const targetNodes = findTargetNodes(state, chainId)\n      if (!targetNodes) {\n        return\n      }\n\n      const target = targetNodes.find(n => n.url === url)\n      if (!target) {\n        return\n      }\n\n      let pre\n      if (CHAINX_MAIN === chainId) {\n        pre = state.currentChainXMainNetNode\n        state.currentChainXMainNetNode = target\n      } else if (CHAINX_TEST === chainId) {\n        pre = state.currentChainXTestNetNode\n        state.currentChainXTestNetNode = target\n      }\n\n      window.nodeStore.set(NODE_STORE_KEY, state)\n      window.sockets.broadcastEvent(events.NODE_CHANGE, {\n        from: pre,\n        to: target\n      })\n    }\n  }\n})\n\nexport const {\n  addNode,\n  removeNode,\n  setCurrentChainXMainNetNode,\n  setCurrentChainXTestNetNode,\n  setCurrentChainXNode,\n  setNodeDelay\n} = nodeSlice.actions\n\nexport const chainxMainNetNodesSelector = state => state.node.chainxMainNetNodes\nexport const chainxTestNetNodesSelector = state => state.node.chainxTestNetNodes\nexport const currentChainXMainNetNodeSelector = state =>\n  state.node.currentChainXMainNetNode\nexport const currentChainXTestNetNodeSelector = state =>\n  state.node.currentChainXTestNetNode\n\nexport const chainxNodesSelector = createSelector(\n  networkSelector,\n  chainxMainNetNodesSelector,\n  chainxTestNetNodesSelector,\n  (network, mainNetNodes, testNetNodes) => {\n    if (network === chainxNetwork.TEST) {\n      return testNetNodes\n    } else if (network === chainxNetwork.MAIN) {\n      return mainNetNodes\n    }\n  }\n)\n\nexport const chainxNodesDelaySelector = createSelector(\n  networkSelector,\n  state => state.node.mainnetNodesDelay,\n  state => state.node.testnetNodesDelay,\n  (network, mainnetNodesDelay, testnetNodesDelay) => {\n    if (network === chainxNetwork.TEST) {\n      return testnetNodesDelay\n    } else if (network === chainxNetwork.MAIN) {\n      return mainnetNodesDelay\n    }\n  }\n)\n\nexport const currentChainxNodeSelector = createSelector(\n  networkSelector,\n  currentChainXMainNetNodeSelector,\n  currentChainXTestNetNodeSelector,\n  (network, mainNetNode, testNetNode) => {\n    if (network === chainxNetwork.TEST) {\n      return testNetNode\n    } else if (network === chainxNetwork.MAIN) {\n      return mainNetNode\n    }\n  }\n)\n\nexport default nodeSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  version: 0,\n  toSign: null\n}\n\nconst txSlice = createSlice({\n  name: 'tx',\n  initialState,\n  reducers: {\n    setToSign(state, { payload }) {\n      state.toSign = payload\n    },\n    clearToSign(state) {\n      // TODO: 切换网络是清掉toSign\n      state.toSign = null\n    }\n  }\n})\n\nexport const { setToSign, clearToSign } = txSlice.actions\n\nexport const toSignSelector = state => state.tx.toSign\n\nexport default txSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst statusSlice = createSlice({\n  name: 'status',\n  initialState: {\n    loading: false,\n    initLoading: true,\n    homeLoading: true\n  },\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload\n    },\n    setInitLoading: (state, action) => {\n      state.initLoading = action.payload\n    },\n    setHomeLoading: (state, action) => {\n      state.homeLoading = action.payload\n    }\n  }\n})\n\nexport const {\n  setLoading,\n  setInitLoading,\n  setHomeLoading\n} = statusSlice.actions\n\nexport default statusSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { getChainx } from '../../shared/chainx'\n\nconst intentionSlice = createSlice({\n  name: 'intentions',\n  initialState: {\n    intentions: {}\n  },\n  reducers: {\n    setIntentions: {\n      reducer(state, action) {\n        state.intentions = action.payload\n      }\n    }\n  }\n})\n\nexport const { setIntentions } = intentionSlice.actions\n\nasync function getStake(isTestNet) {\n  const chainx = getChainx()\n  const { stake } = chainx\n\n  return stake\n}\n\nexport const fetchIntentions = isTestNet => async dispatch => {\n  const stake = await getStake(isTestNet)\n\n  const resp = await stake.getIntentions()\n  const result = {}\n  resp.forEach(item => {\n    result[item.account] = item.name\n  })\n  dispatch(setIntentions(result))\n}\n\nexport const intentionsSelector = state => {\n  return state.intentions.intentions\n}\n\nexport default intentionSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { getChainx } from '../../shared/chainx'\n\nconst tradeSlice = createSlice({\n  name: 'trade',\n  initialState: {\n    pairs: {},\n    fee: 0\n  },\n  reducers: {\n    setPairs: (state, action) => {\n      state.pairs = action.payload\n    },\n    setFee: (state, action) => {\n      state.fee = action.payload\n    }\n  }\n})\n\nexport const { setPairs, setFee } = tradeSlice.actions\n\nexport const fetchTradePairs = isTestNet => async dispatch => {\n  const chainx = getChainx()\n\n  const { trade } = chainx\n\n  const pairs = await trade.getTradingPairs()\n  const result = {}\n  pairs.forEach(item => {\n    result[item.id] = item\n  })\n  dispatch(setPairs(result))\n}\n\nexport const fetchFee = isTestNet => async dispatch => {\n  const chainx = getChainx()\n\n  const { asset } = chainx\n\n  const resp = await asset.getWithdrawalLimitByToken(['BTC'])\n  dispatch(setFee(resp.fee))\n}\n\nexport const feeSelector = state => state.trade.fee\nexport const pairsSelector = state => state.trade.pairs\n\nexport default tradeSlice.reducer\n","import testReducer from './testSlice'\nimport account from './accountSlice'\nimport node from './nodeSlice'\nimport setting from './settingSlice'\nimport tx from './txSlice'\nimport statusReducer from './statusSlice'\nimport intentionSlice from './intentionSlice'\nimport tradeSlice from './tradeSlice'\n\nexport default {\n  test: testReducer,\n  status: statusReducer,\n  intentions: intentionSlice,\n  trade: tradeSlice,\n  account,\n  node,\n  setting,\n  tx\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nconst store = configureStore({ reducer: rootReducer })\nexport default store\n","export const codes = {\n  INVALID_ADDRESS: 'invalid-address',\n  INVALID_MODULE: 'invalid-module',\n  INVALID_METHOD: 'invalid-method',\n  INVALID_SIGN_DATA: 'invalid-sign-data',\n  SIGN_BUSY: 'sign-transaction-busy',\n  INVALID_NETWORK: 'invalid-network',\n  TX_STATUS_ERROR: 'tx-status-error',\n  UNKNOWN: 'unknown'\n}\n","export const methods = {\n  getAccount: 'chainx_account',\n  getSettings: 'get_settings',\n  signChainxExtrinsic: 'chainx_sign',\n  signAndSendChainXExtrinsic: 'chainx_sign_send',\n  getNode: 'chainx_get_node'\n}\n","import store from '../store'\nimport { currentChainxAccountSelector } from '../store/reducers/accountSlice'\nimport _ from 'lodash'\nimport { codes } from '../error'\nimport { setToSign, toSignSelector } from '../store/reducers/txSlice'\nimport { Extrinsic } from '@chainx/types'\nimport { methods } from '../constants'\nimport { currentChainxNodeSelector } from '../store/reducers/nodeSlice'\n\nfunction getAccount() {\n  const state = store.getState()\n  const account = currentChainxAccountSelector(state)\n  return {\n    result: account ? _.pick(account, ['name', 'address']) : account\n  }\n}\n\nfunction getNode() {\n  const state = store.getState()\n  const node = currentChainxNodeSelector(state)\n  return {\n    result: node\n  }\n}\n\nfunction getSettings() {\n  const state = store.getState()\n  const settings = state.setting\n\n  return {\n    result: settings\n  }\n}\n\nconst type = 'api'\nexport default class ApiService {\n  constructor(sockets, request, id) {\n    this.sockets = sockets // 就是LowLevelSocketService\n    this.request = request\n    this.id = id\n  }\n\n  async handle() {\n    const data = this.request.data.payload\n\n    if (!data.method) {\n      return this.sockets.emit(this.request.data.origin, this.id, type, {\n        id: data.id,\n        error: {\n          code: -1,\n          message: 'method not found'\n        }\n      })\n    }\n\n    switch (data.method) {\n      case methods.getSettings:\n        return this.emit(getSettings())\n      case methods.getAccount:\n        return this.emit(getAccount())\n      case methods.getNode:\n        return this.emit(getNode())\n      case methods.signAndSendChainXExtrinsic: {\n        return this.sign(data.id, ...data.params, true)\n      }\n      case methods.signChainxExtrinsic: {\n        return this.sign(data.id, ...data.params, false)\n      }\n      default: {\n        return {\n          error: {\n            code: -1,\n            message: `${data.method} not found`\n          }\n        }\n      }\n    }\n  }\n\n  emit(data) {\n    this.sockets.emit(this.request.data.origin, this.id, type, {\n      id: this.request.data.payload.id,\n      ...data\n    })\n  }\n\n  async sign(id, from, data, needBroadcast) {\n    const state = store.getState()\n    const currentAccount = currentChainxAccountSelector(state)\n    if (!currentAccount || currentAccount.address !== from) {\n      this.emit({\n        error: {\n          code: codes.INVALID_ADDRESS,\n          message: `${from} not found`\n        }\n      })\n    }\n\n    if (!from || !data) {\n      return this.emit({\n        error: {\n          code: codes.INVALID_SIGN_DATA,\n          message: 'invalid sign params'\n        }\n      })\n    }\n\n    const currentToSign = toSignSelector(state)\n    if (currentToSign) {\n      return this.emit({\n        error: {\n          code: codes.SIGN_BUSY,\n          message: 'sign busy'\n        }\n      })\n    }\n\n    try {\n      new Extrinsic(data)\n    } catch (e) {\n      return this.emit({\n        error: {\n          code: codes.INVALID_SIGN_DATA,\n          message: 'invalid sign data'\n        }\n      })\n    }\n\n    store.dispatch(\n      setToSign({\n        origin: this.request.data.origin,\n        id: this.id,\n        dataId: id,\n        address: from,\n        data,\n        needBroadcast: !!needBroadcast\n      })\n    )\n\n    this.sockets.activateWindow()\n  }\n}\n","import ApiService from './ApiService'\n\nexport let service\n\n// 就是LowLevelSocketService\nexport function setService(s) {\n  service = s\n}\n\nexport const handleApiResponse = async (request, id) => {\n  // @todo 校验 appkey。校验 nonce\n  await new ApiService(service, request, id).handle()\n}\n\nexport const handlePairedResponse = async (request, id) => {\n  // TODO: 外部dapp请求连接，打开确认框让用户确认\n  return await service.emit(request.data.origin, id, 'paired', true)\n}\n","import { getChainx } from './chainx'\nimport { service } from '../services/socketService'\nimport store from '../store'\nimport { toSignSelector } from '../store/reducers/txSlice'\nimport { currentChainxAccountSelector } from '../store/reducers/accountSlice'\nimport { codes } from '../error'\nimport { events as socketsEvents } from '../store/reducers/constants'\nimport { SubmittableExtrinsic } from 'chainx.js'\n\nexport const getSignRequest = async (pass, acceleration) => {\n  const state = store.getState()\n  const { origin, id, data, dataId, needBroadcast } = toSignSelector(state)\n  const currentAccount = currentChainxAccountSelector(state)\n\n  const chainx = getChainx()\n  const api = chainx.api\n  let extrinsic\n  try {\n    extrinsic = new SubmittableExtrinsic(chainx.api, data)\n  } catch (e) {\n    service.emit(origin, id, 'api', {\n      id: dataId,\n      error: {\n        code: codes.INVALID_SIGN_DATA,\n        message: 'invalid sign data'\n      }\n    })\n  }\n  const account = chainx.account.fromKeyStore(currentAccount.keystore, pass)\n  const nonce = await api.query.system.accountNonce(account.publicKey())\n  const signedExtrinsic = extrinsic.sign(account, {\n    nonce: nonce.toNumber(),\n    acceleration,\n    blockHash: api.genesisHash\n  })\n\n  const hash = signedExtrinsic.hash.toHex()\n  service.emit(origin, id, 'api', {\n    id: dataId,\n    result: {\n      hash,\n      hex: signedExtrinsic.toHex()\n    }\n  })\n\n  if (!needBroadcast) {\n    return\n  }\n\n  function emitInfo(err, status) {\n    return service.emit(origin, id, 'event', {\n      event: socketsEvents.TX_STATUS,\n      payload: {\n        id: dataId,\n        err: err || null,\n        status: status || null\n      }\n    })\n  }\n\n  try {\n    await signedExtrinsic.send(emitInfo)\n  } catch (e) {\n    return emitInfo(e)\n  }\n}\n\nexport const getCurrentGas = async (\n  currentAccount,\n  query,\n  setErrMsg,\n  setCurrentGas\n) => {\n  const chainx = getChainx()\n\n  const { address, module, method, args } = query\n\n  const call = chainx.api.tx[module][method]\n\n  if (!call) {\n    setErrMsg('Invalid method')\n    return\n  }\n\n  if (currentAccount.address !== address) {\n    setErrMsg('Invalid address')\n    return\n  }\n\n  if (method === 'putCode') {\n    args[1] = Uint8Array.from(Object.values(args[1]))\n  }\n\n  const submittable = call(...args)\n  const _currentGas = submittable.getFeeSync(currentAccount.address, 1)\n\n  setCurrentGas(_currentGas)\n}\n","import React from 'react'\n\nfunction Icon(props) {\n  const { className = {}, style = {}, name = '' } = props\n  return <i className={`iconfont icon${name} ${className}`} style={style} />\n}\n\nexport default Icon\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useOutsideClick } from '../shared'\nimport { useSelector } from 'react-redux'\nimport ClipboardJS from 'clipboard'\nimport Icon from '../components/Icon'\nimport './index.scss'\nimport logo from '../assets/extension_logo.svg'\nimport { currentChainxAccountSelector } from '../store/reducers/accountSlice'\nimport { isTestNetSelector } from '../store/reducers/settingSlice'\n\nfunction Home(props) {\n  const ref = useRef(null)\n  const [showAccountAction, setShowAccountAction] = useState(false)\n  const isTestNet = useSelector(isTestNetSelector)\n  const [copySuccess, setCopySuccess] = useState('')\n  const currentAccount = useSelector(currentChainxAccountSelector)\n  const toSign = useSelector(state => state.tx.toSign)\n\n  useEffect(() => {\n    getUnapprovedTxs()\n    // eslint-disable-next-line\n  }, [isTestNet, toSign])\n\n  useOutsideClick(ref, () => {\n    setShowAccountAction(false)\n  })\n\n  async function getUnapprovedTxs() {\n    try {\n      if (toSign) {\n        props.history.push({\n          pathname: '/requestSign/' + toSign.id,\n          query: toSign\n        })\n      }\n    } catch (error) {\n      console.log('sign request error occurs ', error)\n    } finally {\n      setCopyEvent()\n    }\n  }\n\n  function setCopyEvent() {\n    const clipboard = new ClipboardJS('.copy')\n    clipboard.on('success', function() {\n      setCopySuccess('Copied!')\n      setTimeout(() => {\n        setCopySuccess('')\n      }, 2000)\n    })\n  }\n\n  async function operateAccount(type) {\n    if (currentAccount.address) {\n      props.history.push({\n        pathname: '/enterPassword',\n        query: {\n          address: currentAccount.address,\n          keystore: currentAccount.keystore,\n          type: type\n        }\n      })\n    }\n    setShowAccountAction(false)\n  }\n\n  return (\n    <>\n      {currentAccount ? (\n        <div className=\"container-account\">\n          <div className=\"account-title\">\n            <span className=\"name\">{currentAccount.name}</span>\n            <div\n              ref={ref}\n              className=\"arrow\"\n              onClick={() => {\n                setShowAccountAction(!showAccountAction)\n              }}\n            >\n              <Icon className=\"arrow-icon\" name=\"Arrowdown\" />\n            </div>\n            {showAccountAction ? (\n              <div className=\"account-action\">\n                <span onClick={() => operateAccount('export')}>\n                  Export PrivateKey\n                </span>\n                <span onClick={() => operateAccount('remove')}>\n                  Forget Account\n                </span>\n              </div>\n            ) : null}\n          </div>\n          <div className=\"account-address\">\n            <span>{currentAccount.address}</span>\n          </div>\n          <button className=\"copy\" data-clipboard-text={currentAccount.address}>\n            <Icon className=\"copy-icon\" name=\"copy\" />\n            <span className=\"copy-text\">Copy</span>\n          </button>\n          <span>{copySuccess}</span>\n        </div>\n      ) : (\n        <div className=\"container container-column container-no-account\">\n          <div className=\"home-logo\">\n            <img src={logo} alt=\"logo\" />\n          </div>\n          <button\n            className=\"button button-white button-new-account\"\n            onClick={() => props.history.push('/createAccount')}\n          >\n            New Account\n          </button>\n          <button\n            className=\"button button-white button-import-account\"\n            onClick={() => props.history.push('/importAccount')}\n          >\n            Import Account\n          </button>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Home\n","import React from 'react'\n\nfunction getDotInCenterStr(value) {\n  if (value && value.length > 13) {\n    const length = value.length\n    return value.slice(0, 5) + '...' + value.slice(length - 5, length)\n  }\n  return value\n}\n\nfunction DotInCenterStr(props) {\n  const { value } = props\n  const simpleStr = getDotInCenterStr(value)\n\n  return <span>{simpleStr}</span>\n}\n\nexport default DotInCenterStr\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport ClipboardJS from 'clipboard'\nimport ReactTooltip from 'react-tooltip'\nimport {\n  isCurrentNodeInit,\n  useOutsideClick,\n  sleep,\n  setChainx\n} from '../../shared'\nimport Icon from '../../components/Icon'\nimport DotInCenterStr from '../../components/DotInCenterStr'\nimport logo from '../../assets/extension_logo.svg'\nimport testNetImg from '../../assets/testnet.svg'\nimport switchImg from '../../assets/switch.svg'\nimport './header.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  isTestNetSelector,\n  networkSelector,\n  setNetwork\n} from '../../store/reducers/settingSlice'\nimport {\n  chainxAccountsSelector,\n  currentChainxAccountSelector,\n  setCurrentChainXMainNetAccount,\n  setCurrentChainXTestNetAccount\n} from '../../store/reducers/accountSlice'\nimport { setInitLoading } from '../../store/reducers/statusSlice'\nimport { CHAINX_MAIN, CHAINX_TEST } from '../../store/reducers/constants'\nimport {\n  chainxNodesDelaySelector,\n  chainxNodesSelector,\n  currentChainxNodeSelector,\n  setCurrentChainXNode,\n  setNodeDelay\n} from '../../store/reducers/nodeSlice'\nimport getDelay from '../../shared/updateNodeStatus'\n\nfunction Header(props) {\n  const refNodeList = useRef(null)\n  const refAccountList = useRef(null)\n  const [showNodeListArea, setShowNodeListArea] = useState(false)\n  const [showAccountArea, setShowAccountArea] = useState(false)\n  const [copyText, setCopyText] = useState('Copy')\n  const currentAccount = useSelector(currentChainxAccountSelector)\n  const accounts = useSelector(chainxAccountsSelector)\n  const currentNode = useSelector(currentChainxNodeSelector)\n  const nodeList = useSelector(chainxNodesSelector)\n  const chainId = useSelector(networkSelector)\n  const isTestNet = useSelector(isTestNetSelector)\n  const nodesDelay = useSelector(chainxNodesDelaySelector)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    setCopyEvent()\n    getDelay(nodeList, chainId, dispatch, setNodeDelay)\n    // eslint-disable-next-line\n  }, [isTestNet, chainId, nodeList])\n\n  useOutsideClick(refNodeList, () => {\n    setShowNodeListArea(false)\n  })\n\n  useOutsideClick(refAccountList, () => {\n    setShowAccountArea(false)\n  })\n\n  function setCopyEvent() {\n    const clipboard = new ClipboardJS('.account-copy')\n    clipboard.on('success', function() {\n      setCopyText('Copied!')\n    })\n  }\n\n  async function setNode(url) {\n    dispatch(setInitLoading(true))\n    dispatch(setCurrentChainXNode({ chainId, url }))\n    setShowNodeListArea(false)\n    Promise.race([setChainx(url), sleep(5000)])\n      .then(chainx => {\n        if (!chainx) {\n          props.history.push('/nodeError')\n        } else {\n          props.history.push('/redirect')\n        }\n      })\n      .catch(e => {\n        console.log('switch node error ', e)\n        props.history.push('/nodeError')\n      })\n      .finally(() => {\n        dispatch(setInitLoading(false))\n      })\n  }\n\n  function getDelayClass(delay) {\n    if (delay === 'timeout') {\n      return 'red'\n    } else if (delay > 300) {\n      return 'yellow'\n    } else if (delay <= 300) {\n      return 'green'\n    } else {\n      return 'green'\n    }\n  }\n\n  function getDelayText(delay) {\n    return delay ? (delay === 'timeout' ? 'timeout' : delay + ' ms') : ''\n  }\n\n  function switchNet() {\n    dispatch(setNetwork(isTestNet ? CHAINX_MAIN : CHAINX_TEST))\n    setShowNodeListArea(false)\n    props.history.push('/')\n  }\n\n  return (\n    <div className=\"header\">\n      <div className=\"container container-header\">\n        <Link to=\"/\">\n          <img className=\"logo\" src={logo} alt=\"logo\" />\n          {isTestNet && (\n            <img className=\"testnet\" src={testNetImg} alt=\"testNetImg\" />\n          )}\n        </Link>\n        {props.history.location.pathname.includes('requestSign') ? (\n          <div className=\"center-title\">\n            <span>\n              {(\n                (props.history.location.query &&\n                  props.history.location.query.method) ||\n                ''\n              )\n                .replace(/([A-Z])/g, ' $1')\n                .toLowerCase() || 'Sign Request'}\n            </span>\n          </div>\n        ) : (\n          <div className=\"right\">\n            <div\n              ref={refNodeList}\n              className=\"current-node\"\n              onClick={() => {\n                setShowNodeListArea(!showNodeListArea)\n                setShowAccountArea(false)\n              }}\n            >\n              <span\n                className={\n                  'dot ' + getDelayClass(nodesDelay[currentNode.url]) + '-bg'\n                }\n              />\n              <span>{currentNode && currentNode.name}</span>\n            </div>\n            <div\n              ref={refAccountList}\n              className=\"setting\"\n              onClick={() => {\n                setShowAccountArea(!showAccountArea)\n                setShowNodeListArea(false)\n              }}\n            >\n              <Icon name=\"Menu\" className=\"setting-icon\" />\n            </div>\n          </div>\n        )}\n        {\n          <div className={(showNodeListArea ? '' : 'hide ') + 'node-list-area'}>\n            <div className=\"node-list\">\n              {currentNode &&\n                (nodeList || []).map((item, index) => (\n                  <div\n                    className={\n                      item.name === currentNode.name\n                        ? 'node-item active'\n                        : 'node-item'\n                    }\n                    key={item.name}\n                    onClick={() => {\n                      setNode(item.url)\n                    }}\n                  >\n                    <div className=\"node-item-active-flag\" />\n                    <div className=\"node-item-detail\">\n                      <div className=\"node-item-detail-url\">\n                        <span className=\"url\">\n                          {item.url.split('//')[1] || item.url}\n                        </span>\n                        <div\n                          className={\n                            isCurrentNodeInit(item, isTestNet)\n                              ? 'node-item-detail-edit'\n                              : 'node-item-detail-edit custom'\n                          }\n                          onClick={e => {\n                            e.stopPropagation()\n                            e.nativeEvent.stopImmediatePropagation()\n                            setShowNodeListArea(false)\n                            const query = {\n                              nodeInfo: item,\n                              type: 'remove'\n                            }\n                            props.history.push({\n                              pathname: '/addNode',\n                              query: query\n                            })\n                          }}\n                        >\n                          <Icon name=\"Edit\" />\n                        </div>\n                      </div>\n                      <span\n                        className={\n                          'delay ' + getDelayClass(nodesDelay[item.url])\n                        }\n                      >\n                        {getDelayText(nodesDelay[item.url])}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n            </div>\n            <div\n              className=\"add-node node-action-item\"\n              onClick={() => {\n                props.history.push('/addNode')\n              }}\n            >\n              <Icon name=\"Add\" className=\"add-node-icon node-action-item-img\" />\n              <span>Add node</span>\n            </div>\n            <div\n              className=\"switch-net node-action-item\"\n              onClick={() => {\n                switchNet()\n              }}\n            >\n              <img\n                className=\"node-action-item-img\"\n                src={switchImg}\n                alt=\"switchImg\"\n              />\n              <span>Switch to {isTestNet ? 'Mainnet' : 'Testnet'}</span>\n            </div>\n          </div>\n        }\n        {showAccountArea && !showNodeListArea ? (\n          <div className=\"account-area\">\n            <div className=\"action\">\n              <div\n                onClick={() => {\n                  setShowAccountArea(false)\n                  props.history.push('/importAccount')\n                }}\n              >\n                <Icon name=\"Putin\" className=\"account-area-icon\" />\n                <span>Import</span>\n              </div>\n              <div\n                onClick={() => {\n                  setShowAccountArea(false)\n                  props.history.push('/createAccount')\n                }}\n              >\n                <Icon name=\"Add\" className=\"account-area-icon\" />\n                <span>New</span>\n              </div>\n            </div>\n            {accounts.length > 0 ? (\n              <div className=\"accounts\">\n                {accounts.length > 0 &&\n                  accounts.map(item => (\n                    <div\n                      className={\n                        item.address === currentAccount.address\n                          ? 'account-item active'\n                          : 'account-item'\n                      }\n                      key={item.name}\n                      onClick={async () => {\n                        if (isTestNet) {\n                          dispatch(\n                            setCurrentChainXTestNetAccount({\n                              address: item.address\n                            })\n                          )\n                        } else {\n                          dispatch(\n                            setCurrentChainXMainNetAccount({\n                              address: item.address\n                            })\n                          )\n                        }\n                        setShowAccountArea(false)\n                        props.history.push('/')\n                      }}\n                    >\n                      <div className=\"account-item-active-flag\" />\n                      <div className=\"account-item-detail\">\n                        <span className=\"name\">{item.name}</span>\n                        <div className=\"address\">\n                          <DotInCenterStr value={item.address} />\n                          <button\n                            className=\"account-copy\"\n                            data-clipboard-text={item.address}\n                            onClick={e => {\n                              e.stopPropagation()\n                              e.nativeEvent.stopImmediatePropagation()\n                            }}\n                            data-tip\n                            data-for=\"copy-address-tooltip\"\n                          >\n                            <Icon className=\"copy-icon\" name=\"copy\" />\n                          </button>\n                          <ReactTooltip\n                            id=\"copy-address-tooltip\"\n                            effect=\"solid\"\n                            globalEventOff=\"click\"\n                            className=\"extension-tooltip\"\n                            afterHide={() => setCopyText('Copy')}\n                          >\n                            <span>{copyText}</span>\n                          </ReactTooltip>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(Header)\n","import React from 'react'\n// @ts-ignore\nimport warningIcon from '../../assets/warning.png'\nimport './index.scss'\n\nfunction StaticWarning(props) {\n  const {\n    title = '',\n    desc = 'Do not store the mnemonic words in your PC or Net. Anybody can take your assets with the mnemonic words.'\n  } = props\n\n  return (\n    <div className=\"static-warning\">\n      <img className=\"warning-icon\" src={warningIcon} alt=\"warning\" />\n      <span className=\"warning-title\">{title}</span>\n      <div className=\"warning-desc\">{desc}</div>\n    </div>\n  )\n}\n\nexport default StaticWarning\n","import React from 'react'\nimport './index.scss'\n\nfunction ErrorMessage(props) {\n  const { msg } = props\n\n  return (\n    <div className=\"error-message\">\n      <span>{msg}</span>\n    </div>\n  )\n}\n\nexport default ErrorMessage\n","import React from 'react'\nimport './index.scss'\n\nexport default function(props) {\n  const { msg } = props\n\n  return (\n    <div className=\"warning-message\">\n      <span>{msg}</span>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Account } from 'chainx.js'\nimport ErrorMessage from '../ErrorMessage'\nimport WarningMessage from '../WarningMessage'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { isTestNetSelector } from '../../store/reducers/settingSlice'\nimport { CHAINX_MAIN, CHAINX_TEST } from '../../store/reducers/constants'\nimport {\n  addAccount,\n  chainxAccountsSelector\n} from '../../store/reducers/accountSlice'\n\nfunction NameAndPassword(props) {\n  const { secret, onSuccess } = props\n  const [obj, setObj] = useState({ name: '', pass: '', repass: '' })\n  const [errMsg, setErrMsg] = useState('')\n  const accounts = useSelector(chainxAccountsSelector)\n  const isTestNet = useSelector(isTestNetSelector)\n  const dispatch = useDispatch()\n\n  Account.setNet(isTestNet ? 'testnet' : 'mainnet')\n  const account = Account.from(secret)\n  const address = account.address()\n  const sameAccount = (accounts || []).find(\n    account => account.address === address\n  )\n\n  const check = () => {\n    if (!obj.name || !obj.pass || !obj.repass) {\n      setErrMsg('name and password are required')\n      return false\n    }\n    if (obj.pass.length < 8) {\n      setErrMsg('password length must great than 8')\n      return false\n    }\n    if (!/(?=.*[a-z])(?=.*[A-Z])/.test(obj.pass)) {\n      setErrMsg('password must include lower and upper characters')\n      return false\n    }\n    if (obj.pass !== obj.repass) {\n      setErrMsg('password is not match')\n      return false\n    }\n    return true\n  }\n\n  const create = async () => {\n    if (!check()) {\n      return\n    }\n\n    const keystore = account.encrypt(obj.pass)\n\n    dispatch(\n      addAccount({\n        chainId: isTestNet ? CHAINX_TEST : CHAINX_MAIN,\n        account: { name: obj.name, address: account.address(), keystore }\n      })\n    )\n    onSuccess()\n  }\n\n  return (\n    <>\n      <input\n        className=\"input\"\n        type=\"text\"\n        required\n        value={obj.name}\n        onChange={e => setObj({ ...obj, name: e.target.value })}\n        placeholder=\"Name(12 characters max)\"\n      />\n      <input\n        className=\"input\"\n        type=\"password\"\n        value={obj.pass}\n        onChange={e => setObj({ ...obj, pass: e.target.value })}\n        placeholder=\"Password\"\n      />\n      <input\n        className=\"input\"\n        type=\"password\"\n        value={obj.repass}\n        onChange={e => setObj({ ...obj, repass: e.target.value })}\n        onKeyPress={event => {\n          if (event.key === 'Enter') {\n            create()\n          }\n        }}\n        placeholder=\"Password confirmation\"\n      />\n      <button\n        className=\"button button-yellow margin-top-40\"\n        onClick={() => {\n          create()\n        }}\n      >\n        OK\n      </button>\n      {errMsg && <ErrorMessage msg={errMsg} />}\n      {sameAccount && (\n        <WarningMessage\n          msg={`Account ${sameAccount.name} has same address, and it will be overwritten by this account.`}\n        />\n      )}\n    </>\n  )\n}\n\nexport default NameAndPassword\n","import React from 'react'\nimport { useState } from 'react'\nimport { Account } from 'chainx.js'\nimport shuffle from 'lodash.shuffle'\nimport './createAccount.scss'\nimport StaticWarning from '../../components/StaticWarning'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport NameAndPassword from '../../components/NameAndPassword'\n\nfunction CreateAccount(props) {\n  const titleList = [\n    'New Account',\n    'Backup Mnemonic',\n    'Verify Mnemonic',\n    'Name and password setting'\n  ]\n  const subTitleList = [\n    '',\n    'Write down following mnemonic words, and will be used next step.',\n    'Mark the words one by one in the order last step shows.',\n    'Password contains at lease 8 characters, and at least one upper,lower and number case character.'\n  ]\n  const buttonTextList = ['Begin', 'Next', 'Next', 'OK']\n\n  const [currentStep, setCurrentStep] = useState(0)\n  const [errMsg, setErrMsg] = useState('')\n  const [mnemonic] = useState(Account.newMnemonic())\n  const mnemonicList = mnemonic.split(' ')\n  const [wordSelectedList, setWordSelectedList] = useState(\n    new Array(mnemonicList.length).fill(false)\n  )\n  const [shuffleMnemonicList] = useState(shuffle(mnemonicList))\n  const [validateMnemonicList, setValidateMnemonicList] = useState(\n    new Array(12).fill('')\n  )\n  const mnemonicWords = mnemonicList.map((item, index) => ({\n    value: item,\n    index: index\n  }))\n\n  const clearErrMsg = () => {\n    setErrMsg('')\n    return true\n  }\n\n  const checkMnemonic = () => {\n    if (mnemonic === validateMnemonicList.join(' ')) {\n      clearErrMsg()\n      return true\n    }\n    setErrMsg('Mnemonic not correct')\n    return false\n  }\n\n  return (\n    <div className=\"container create-account\">\n      <div className=\"create-account-title\">\n        <span>{titleList[currentStep]}</span>\n        <span className=\"create-account-sub-title\">\n          {subTitleList[currentStep]}\n        </span>\n      </div>\n      <div className=\"create-account-body\">\n        <div className=\"create-account-body-content\">\n          {currentStep === 0 && <StaticWarning title=\"Backup Mnemonic\" />}\n          {currentStep === 1 &&\n            mnemonicWords.map(item => (\n              <div className=\"word-item\" key={item.index}>\n                {item.value}\n              </div>\n            ))}\n          {currentStep === 2 &&\n            shuffleMnemonicList.map((item, index) => (\n              <div\n                className={\n                  'word-item word-item-click ' +\n                  (wordSelectedList[index] ? 'word-item-selected' : '')\n                }\n                key={index}\n                onClick={() => {\n                  const wordSelected = wordSelectedList[index]\n                  let wordIndex = validateMnemonicList.indexOf('')\n                  let replaceWord = item\n                  if (wordSelected) {\n                    // word has selected, remove last word\n                    wordIndex =\n                      11 -\n                      Array.from(validateMnemonicList)\n                        .reverse()\n                        .indexOf(item)\n                    replaceWord = ''\n                  }\n                  validateMnemonicList.splice(wordIndex, 1, replaceWord)\n                  setValidateMnemonicList(Array.from(validateMnemonicList))\n                  wordSelectedList.splice(index, 1, !wordSelected)\n                  setWordSelectedList(Array.from(wordSelectedList))\n                }}\n              >\n                {item}\n              </div>\n            ))}\n          {currentStep === 3 && (\n            <NameAndPassword\n              type=\"mnemonic\"\n              secret={mnemonic}\n              onSuccess={function() {\n                props.history.push('/')\n              }}\n            />\n          )}\n        </div>\n        {currentStep < 2 && (\n          <button\n            className=\"button button-yellow margin-top-40\"\n            onClick={() => {\n              if (currentStep < 2) {\n                setCurrentStep(s => s + 1)\n              }\n            }}\n          >\n            {buttonTextList[currentStep]}\n          </button>\n        )}\n        {currentStep === 2 && (\n          <div className=\"container-spacebetween margin-top-40\">\n            <button\n              className=\"button button-white-half\"\n              onClick={() => clearErrMsg() && setCurrentStep(s => s - 1)}\n            >\n              Pre\n            </button>\n            <button\n              className=\"button button-yellow-half\"\n              onClick={() => checkMnemonic() && setCurrentStep(s => s + 1)}\n            >\n              Next\n            </button>\n          </div>\n        )}\n        {currentStep > 1 ? errMsg ? <ErrorMessage msg={errMsg} /> : null : null}\n      </div>\n      {currentStep === 2 && (\n        <div className=\"validate-mnemonic-area\">\n          <div className=\"validate-mnemonic-area-container\">\n            {validateMnemonicList.map((item, index) => (\n              <span key={index}>{item}</span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default CreateAccount\n","import React, { useState } from 'react'\nimport './importAccount.scss'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport NameAndPassword from '../../components/NameAndPassword'\n\nfunction ImportAccount(props) {\n  const [currentStep, setCurrentStep] = useState(0)\n  const [currentTabIndex, setCurrentTabIndex] = useState(0)\n  const [pk, setPk] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const [mnemonicList, setMnemonicList] = useState(new Array(12).fill(''))\n\n  const titleList = [\n    ['Mnemonic', 'Private key'],\n    ['Password', 'Password']\n  ]\n  const subTitleList = [\n    ['Input mnemonic words', 'Input private key'],\n    ['', '']\n  ]\n\n  const checkStep1 = () => {\n    if (currentTabIndex === 0) {\n      if (mnemonicList.some(item => item === '')) {\n        setErrMsg('Mnemonic is not correct')\n        return\n      }\n    } else if (currentTabIndex === 1) {\n      if (!pk) {\n        setErrMsg('Private key is not correct')\n        return\n      }\n    }\n\n    setErrMsg('')\n    setCurrentStep(s => s + 1)\n  }\n\n  return (\n    <div className=\"container import-account\">\n      <div className=\"import-account-title\">\n        <div className=\"import-account-title-select\">\n          <span>{titleList[currentStep][currentTabIndex]}</span>\n          {currentStep === 0 ? (\n            <span\n              className=\"second-choice\"\n              onClick={() => {\n                setErrMsg('')\n                setCurrentTabIndex(1 - currentTabIndex)\n              }}\n            >\n              {titleList[currentStep][1 - currentTabIndex]}\n            </span>\n          ) : null}\n        </div>\n        <span className=\"import-account-sub-title\">\n          {subTitleList[currentStep][currentTabIndex]}\n        </span>\n      </div>\n      <div className=\"import-account-body\">\n        <div className=\"import-account-body-content\">\n          {currentStep === 0 ? (\n            currentTabIndex === 0 ? (\n              <div className=\"import-mnemonic\">\n                {mnemonicList.map((item, index) => (\n                  <input\n                    className=\"word-item\"\n                    key={index}\n                    value={mnemonicList[index]}\n                    onChange={e => {\n                      mnemonicList.splice(index, 1, e.target.value)\n                      setMnemonicList(Array.from(mnemonicList))\n                    }}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"import-private-key\">\n                <textarea\n                  value={pk}\n                  onChange={e => setPk(e.target.value)}\n                  onKeyPress={event => {\n                    if (event.key === 'Enter') {\n                      checkStep1()\n                    }\n                  }}\n                />\n              </div>\n            )\n          ) : null}\n          {currentStep === 1 && (\n            <NameAndPassword\n              type={currentTabIndex === 0 ? 'mnemonic' : 'pk'}\n              secret={\n                currentTabIndex === 0 ? mnemonicList.join(' ') : pk.trim()\n              }\n              onSuccess={function() {\n                props.history.push('/')\n              }}\n            />\n          )}\n        </div>\n        {currentStep === 0 && (\n          <button\n            className=\"button button-yellow margin-top-40\"\n            onClick={() => {\n              if (currentStep < 1) {\n                checkStep1()\n              }\n            }}\n          >\n            Next\n          </button>\n        )}\n        {errMsg ? <ErrorMessage msg={errMsg} /> : null}\n      </div>\n    </div>\n  )\n}\n\nexport default ImportAccount\n","import { stringCamelCase } from '@chainx/util'\nconst { Extrinsic: OriginExtrinsic } = require('@chainx/types')\n\nclass Extrinsic extends OriginExtrinsic {\n  get methodName() {\n    return this.meta.get('name').toString()\n  }\n\n  get argsArr() {\n    const args = []\n\n    const entries = this.method.get('args').entries()\n    for (let [name, value] of entries) {\n      args.push({ name, value })\n    }\n\n    return args\n  }\n}\n\nexport const parseData = data => {\n  const ex = new Extrinsic(data)\n  return [\n    stringCamelCase(ex.methodName),\n    ex.argsArr.map(item =>\n      ex.methodName === 'put_code' ? item.value : item.value.toString()\n    ),\n    ex.argsArr\n  ]\n}\n","import BigNumber from 'bignumber.js'\n\nexport default function toPrecision(value, precision = 0, showPrecision = 0) {\n  precision = Number(precision)\n  return new BigNumber(value)\n    .dividedBy(Math.pow(10, precision))\n    .toFixed(showPrecision || precision)\n}\n","export const pcxPrecision = 8\nexport const assetsModule = 'xAssets'\nexport const transferMethod = 'transfer'\n","import React from 'react'\nimport toPrecision from '../../shared/toPrecision'\nimport { pcxPrecision } from '../../shared/constants'\nimport { replaceBTC } from '../../shared/chainx'\n\nexport default function(props) {\n  const { query } = props\n\n  return (\n    <div className=\"detail\">\n      <div className=\"detail-amount\">\n        <span>Amount</span>\n        <span>\n          {toPrecision(query.args[2], pcxPrecision)} {replaceBTC(query.args[1])}\n        </span>\n      </div>\n      <div className=\"detail-item\">\n        <span>Dest</span>\n        <span>{query.args[0]}</span>\n      </div>\n      <div className=\"detail-item\">\n        <span>Memo</span>\n        <span>{query.args[3]}</span>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function(props) {\n  const { query } = props\n\n  return (\n    <div className=\"detail\">\n      <div className=\"detail-item\">\n        <span>Module</span>\n        <span>{query.module.toLowerCase()}</span>\n      </div>\n      <div className=\"detail-item\">\n        <span>Method</span>\n        <span>{query.method.replace(/([A-Z])/g, '_$1').toLowerCase()}</span>\n      </div>\n      <div className=\"detail-item\">\n        <span>Args</span>\n        <section className=\"args\">\n          <ol>\n            {(query.argsWithName || []).map((arg, index) => {\n              if (!arg) {\n                return null\n              }\n              return (\n                <li key={index}>\n                  <span className=\"arg-name\">{arg.name}: </span>\n                  <span className=\"arg-value\">\n                    {arg.value.toString().length > 10000\n                      ? '[object Object]'\n                      : arg.value.toString()}\n                  </span>\n                </li>\n              )\n            })}\n          </ol>\n        </section>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { pairsSelector } from '../../store/reducers/tradeSlice'\nimport toPrecision from '../../shared/toPrecision'\nimport { pcxPrecision } from '../../shared/constants'\nimport { replaceBTC } from '../../shared/chainx'\n\nexport default function(props) {\n  const { query } = props\n  const pairs = useSelector(pairsSelector)\n\n  const getPrecision = (id, type) => {\n    if (id === 0 && type === 'amount') {\n      return [pcxPrecision, pcxPrecision]\n    }\n    if (id === 0 && type === 'price') {\n      return [9, 7]\n    }\n    if (id === 1 && type === 'amount') {\n      return [3, 3]\n    }\n    if (id === 1 && type === 'price') {\n      return [4, 8]\n    } else {\n      return [pcxPrecision, pcxPrecision]\n    }\n  }\n\n  return (\n    <div className=\"detail\">\n      {query.method === 'putOrder' && (\n        <>\n          <div className=\"detail-amount\">\n            <span>Amount</span>\n            <span>\n              {query.args[2]}{' '}\n              {toPrecision(\n                query.args[3],\n                ...getPrecision(query.args[0], 'amount')\n              )}{' '}\n              {pairs[query.args[0]] && pairs[query.args[0]].assets}\n            </span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Price</span>\n            <span>\n              {toPrecision(\n                query.args[4],\n                ...getPrecision(query.args[0], 'price')\n              )}\n            </span>\n          </div>\n        </>\n      )}\n      {query.method === 'cancelOrder' && (\n        <div className=\"detail-item\">\n          <span>Id</span>\n          <span>{query.args[1]}</span>\n        </div>\n      )}\n      <div className=\"detail-item\">\n        <span>Trade pair</span>\n        <span>\n          {pairs[query.args[0]] &&\n            replaceBTC(pairs[query.args[0]].assets) +\n              '/' +\n              replaceBTC(pairs[query.args[0]].currency)}\n        </span>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport toPrecision from '../../shared/toPrecision'\nimport { pcxPrecision } from '../../shared/constants'\nimport { useSelector } from 'react-redux'\nimport { feeSelector } from '../../store/reducers/tradeSlice'\n\nexport default function(props) {\n  const { query } = props\n  const fee = useSelector(feeSelector)\n\n  return (\n    <div className=\"detail\">\n      {query.method === 'withdraw' && (\n        <>\n          <div className=\"detail-amount\">\n            <span>Amount</span>\n            <span>\n              {toPrecision(query.args[1], pcxPrecision)} {query.args[0]}\n            </span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Fee</span>\n            <span>\n              {toPrecision(fee, pcxPrecision)} {query.args[0]}\n            </span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Dest</span>\n            <span>{query.args[2]}</span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Memo</span>\n            <span>{query.args[3]}</span>\n          </div>\n        </>\n      )}\n      {query.method === 'revokeWithdraw' && (\n        <div className=\"detail-item\">\n          <span>Id</span>\n          <span>{query.args[0]}</span>\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { intentionsSelector } from '../../store/reducers/intentionSlice'\nimport toPrecision from '../../shared/toPrecision'\nimport { pcxPrecision } from '../../shared/constants'\nimport { getChainx, replaceBTC } from '../../shared/chainx'\n\nexport default function(props) {\n  const { query } = props\n  const intentions = useSelector(intentionsSelector)\n\n  const getPublicKey = address => {\n    console.log(address, typeof address)\n    const chainx = getChainx()\n    return chainx.account.decodeAddress(address)\n  }\n\n  return (\n    <div className=\"detail\">\n      {query.args.length > 2 ? (\n        <>\n          <div className=\"detail-amount\">\n            <span>Amount</span>\n            <span>\n              {toPrecision(query.args.slice(-2, -1), pcxPrecision)} PCX\n            </span>\n          </div>\n          {query.method === 'renominate' && (\n            <div className=\"detail-item\">\n              <span>From node</span>\n              <span>\n                {intentions && intentions[getPublicKey(query.args[0])]}\n              </span>\n            </div>\n          )}\n          <div className=\"detail-item\">\n            <span>Dest node</span>\n            <span>\n              {intentions &&\n                intentions[getPublicKey(query.args.slice(-3, -2)[0])]}\n            </span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Memo</span>\n            <span>{query.args.slice(-1)}</span>\n          </div>\n        </>\n      ) : (\n        <>\n          {query.module === 'xTokens' && (\n            <div className=\"detail-item\">\n              <span>Token</span>\n              <span>{replaceBTC(query.args[0])}</span>\n            </div>\n          )}\n          {query.method === 'register' ? (\n            <div className=\"detail-item\">\n              <span>Name</span>\n              <span>{query.args[0]}</span>\n            </div>\n          ) : (\n            <>\n              {query.module === 'xStaking' && (\n                <div className=\"detail-item\">\n                  <span>Node</span>\n                  <span>\n                    {intentions && intentions[getPublicKey(query.args[0])]}\n                  </span>\n                </div>\n              )}\n              {query.method === 'unfreeze' && (\n                <div className=\"detail-item\">\n                  <span>Id</span>\n                  <span>{query.args[1]}</span>\n                </div>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { getCurrentGas, getSignRequest } from '../../shared'\nimport { parseData } from '../../shared/extensionExtrinsic'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport './requestSign.scss'\nimport { DefaultButton, PrimaryButton, Slider } from '@chainx/ui'\nimport { setLoading } from '../../store/reducers/statusSlice'\nimport { fetchIntentions } from '../../store/reducers/intentionSlice'\nimport { fetchFee, fetchTradePairs } from '../../store/reducers/tradeSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Transfer from './Transfer'\nimport CommonTx from './CommonTx'\nimport Trade from './Trade'\nimport AssetsProcess from './AssetsProcess'\nimport Staking from './Staking'\nimport { currentChainxAccountSelector } from '../../store/reducers/accountSlice'\nimport { isTestNetSelector } from '../../store/reducers/settingSlice'\nimport { clearToSign } from '../../store/reducers/txSlice'\nimport { service } from '../../services/socketService'\n\nfunction RequestSign(props) {\n  const dispatch = useDispatch()\n  const [pass, setPass] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const [currentGas, setCurrentGas] = useState(0)\n  const [acceleration, setAcceleration] = useState(1)\n  const [txPanel, setTxPanel] = useState(null)\n  const [newQuery, setNewQuery] = useState(\n    Object.assign({}, props.location.query)\n  )\n  const isTestNet = useSelector(isTestNetSelector)\n  const currentAccount = useSelector(currentChainxAccountSelector)\n\n  const {\n    location: { query }\n  } = props\n\n  useEffect(() => {\n    parseQuery(isTestNet)\n    // eslint-disable-next-line\n  }, [isTestNet])\n\n  const check = () => {\n    if (!pass) {\n      setErrMsg('password is required')\n      return false\n    }\n    return true\n  }\n\n  const fetchRelevantInfo = isTestNet => {\n    if (newQuery.module === 'xStaking') {\n      dispatch(fetchIntentions(isTestNet))\n    }\n    if (newQuery.module === 'xSpot') {\n      dispatch(fetchTradePairs(isTestNet))\n    }\n    if (newQuery.module === 'xAssetsProcess') {\n      dispatch(fetchFee(isTestNet))\n    }\n  }\n\n  const parseQuery = isTestNet => {\n    if (!query) {\n      return\n    }\n    if (!query.module) {\n      try {\n        const [method, args, argsWithName] = parseData(query.data)\n        newQuery.method = method\n        newQuery.argsWithName = argsWithName\n        newQuery.args = args\n        let module = ''\n        const contractMethods = [\n          'putCode',\n          'call',\n          'instantiate',\n          'claimSurcharge',\n          'convertToErc20',\n          'convertToAsset',\n          'setTokenErc20',\n          'setErc20Selector',\n          'removeTokenErc20',\n          'forceIssueErc20',\n          'setGasPrice',\n          'setPrintln'\n        ]\n        if (\n          [\n            'nominate',\n            'renominate',\n            'unnominate',\n            'unfreeze',\n            'claim',\n            'register'\n          ].includes(method)\n        ) {\n          module = 'xStaking'\n          if (args.length === 1 && args[0].length < 6) {\n            module = 'xTokens'\n          }\n        } else if (['withdraw', 'revokeWithdraw'].includes(method)) {\n          module = 'xAssetsProcess'\n        } else if (['putOrder', 'cancelOrder'].includes(method)) {\n          module = 'xSpot'\n        } else if (['transfer'].includes(method)) {\n          module = 'xAssets'\n        } else if (contractMethods.includes(method)) {\n          module = 'xContracts'\n        } else {\n          module = ''\n        }\n        newQuery.module = module\n        setNewQuery(newQuery)\n\n        updateTxPanel()\n        getCurrentGas(currentAccount, newQuery, setErrMsg, setCurrentGas)\n        fetchRelevantInfo(isTestNet)\n      } catch (error) {\n        console.log('parse error ', error)\n        props.history.push('/nodeError')\n      }\n    }\n  }\n\n  const updateTxPanel = () => {\n    let _txPanel\n    if (newQuery.module === 'xAssets' && newQuery.method === 'transfer') {\n      _txPanel = <Transfer query={newQuery} />\n    } else if (newQuery.module === 'xSpot') {\n      _txPanel = <Trade query={newQuery} />\n    } else if (newQuery.module === 'xAssetsProcess') {\n      _txPanel = <AssetsProcess query={newQuery} />\n    } else if (['xStaking', 'xTokens'].includes(newQuery.module)) {\n      _txPanel = <Staking query={newQuery} />\n    } else {\n      _txPanel = <CommonTx query={newQuery} />\n    }\n    setTxPanel(_txPanel)\n  }\n\n  const sign = async () => {\n    setErrMsg('')\n    if (!currentAccount || !currentAccount.address) {\n      setErrMsg(`Error: address is not exist`)\n      return\n    }\n    if (!check()) {\n      return\n    }\n    if (currentAccount.address !== query.address) {\n      setErrMsg('Invalid address')\n      return\n    }\n\n    dispatch(setLoading(true))\n    try {\n      await getSignRequest(pass, acceleration)\n      setErrMsg('')\n      dispatch(setLoading(false))\n      removeCurrentSign()\n      props.history.push('/')\n    } catch (e) {\n      dispatch(setLoading(false))\n      setErrMsg(`Error: ${e.message}`)\n    }\n  }\n\n  window.onbeforeunload = function() {\n    removeCurrentSign()\n  }\n\n  const cancel = () => {\n    removeCurrentSign()\n\n    // 通知dapp拒绝签名\n    const { origin, id, dataId } = query\n    service.emit(origin, id, 'api', {\n      id: dataId,\n      result: { reject: true }\n    })\n  }\n\n  const removeCurrentSign = () => {\n    try {\n      dispatch(clearToSign())\n    } catch (e) {\n      console.log(e)\n      // window.close()\n    } finally {\n      props.history.push('/')\n    }\n  }\n\n  const getCurrentGasText = () => {\n    return (acceleration * currentGas) / 10 ** 8 + ' PCX'\n  }\n\n  // xStaking\n  // 投票，切换投票，赎回，解冻，提息\n  // nominate, renominate, unnominate, unfreeze, claim\n  // 切换投票页面不一样\n  // this.api.tx.xStaking.nominate(target, value, memo);\n  // this.api.tx.xStaking.renominate(from, to, value, memo);\n  // this.api.tx.xStaking.unnominate(target, value, memo);\n  // this.api.tx.xStaking.unfreeze(target, revocationIndex);\n  // this.api.tx.xStaking.claim(target);\n\n  // xAssetsProcess(Asset.js)\n  // 提现，取消提现\n  // withdraw, revokeWithdraw\n  // this.api.tx.xAssetsProcess.withdraw(token, value, addr, ext);\n  // this.api.tx.xAssetsProcess.revokeWithdraw(id);\n\n  // xSpot(Trade.js)\n  // 挂单，撤单\n  // putOrder, cancelOrder\n  // this.api.tx.xSpot.putOrder(pairid, ordertype, direction, amount, price);\n  // this.api.tx.xSpot.cancelOrder(pairid, index);\n\n  const marks = [\n    {\n      value: 1,\n      label: '1x'\n    },\n    {\n      value: 10,\n      label: '10x'\n    }\n  ]\n\n  if (!query) {\n    return <></>\n  }\n\n  return (\n    <div className=\"container request-sign\">\n      <div className=\"tx-panel\">{txPanel}</div>\n      <div className=\"adjust-gas\">\n        <div className=\"adjust-gas-desc\">\n          <div>\n            <span>Fee</span>\n            <span className=\"yellow\">{getCurrentGasText()}</span>\n          </div>\n          <span>More fee, faster speed</span>\n        </div>\n        <Slider\n          defaultValue={acceleration}\n          onChange={v => setAcceleration(v)}\n          // getAriaValueText={valuetext}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          step={1}\n          marks={marks}\n          min={1}\n          max={10}\n        />\n      </div>\n      <div className=\"submit-area\">\n        <div className=\"title\">\n          <span>Input password</span>\n        </div>\n        <input\n          value={pass}\n          onChange={e => setPass(e.target.value)}\n          onKeyPress={event => {\n            if (event.key === 'Enter') {\n              sign()\n            }\n          }}\n          className=\"input\"\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <ErrorMessage msg={errMsg} />\n        <div className=\"button-area margin-top-40\">\n          <DefaultButton size=\"large\" onClick={cancel}>\n            Cancel\n          </DefaultButton>\n          <PrimaryButton size=\"large\" onClick={() => sign()}>\n            Sign\n          </PrimaryButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RequestSign\n","import React from 'react'\nimport './showPrivateKey.scss'\nimport StaticWarning from '../../components/StaticWarning'\n\nfunction ShowPrivateKey(props) {\n  return (\n    <div className=\"show-private-key\">\n      <span className=\"title\">Private Key</span>\n      <StaticWarning desc=\"Do not store your private key in your PC or network. Anybody with your private key will take your asseets.\" />\n      <div className=\"pk\">\n        <span className=\"span-center-wrap\">{props.location.query.pk}</span>\n      </div>\n    </div>\n  )\n}\n\nexport default ShowPrivateKey\n","import React from 'react'\nimport { useState } from 'react'\nimport { Account } from 'chainx.js'\nimport './enterPassword.scss'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  isTestNetSelector,\n  networkSelector\n} from '../../store/reducers/settingSlice'\nimport { removeAccount } from '../../store/reducers/accountSlice'\n\nfunction EnterPassword(props) {\n  const [pass, setPass] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const isTestNet = useSelector(isTestNetSelector)\n  const dispatch = useDispatch()\n  const chainId = useSelector(networkSelector)\n\n  async function exportPk(keystore, password) {\n    try {\n      const pk = Account.fromKeyStore(keystore, password).privateKey()\n      props.history.push({\n        pathname: '/showPrivateKey',\n        query: { pk: pk }\n      })\n    } catch (error) {\n      setErrMsg(error.message)\n    }\n  }\n\n  async function _removeAccount(address, password, keystore) {\n    try {\n      Account.setNet(isTestNet ? 'testnet' : 'mainnet')\n      Account.fromKeyStore(keystore, password)\n      dispatch(removeAccount({ address, chainId }))\n      props.history.push('/')\n    } catch (error) {\n      setErrMsg(error.message)\n    }\n  }\n\n  const enter = async function() {\n    if (pass) {\n      const address = props.location.query.address\n      const keystore = props.location.query.keystore\n      const type = props.location.query.type\n      if (type === 'export') {\n        exportPk(keystore, pass)\n      } else if (type === 'remove') {\n        _removeAccount(address, pass, keystore)\n      }\n    }\n  }\n\n  return (\n    <div className=\"enter-password\">\n      <span className=\"title\">Input password</span>\n      <input\n        className=\"input\"\n        type=\"password\"\n        value={pass}\n        onChange={e => setPass(e.target.value)}\n        onKeyPress={event => {\n          if (event.key === 'Enter') {\n            enter()\n          }\n        }}\n        placeholder=\"Password\"\n      />\n      <button\n        className=\"button button-yellow margin-top-40\"\n        onClick={() => enter()}\n      >\n        Confirm\n      </button>\n      {errMsg ? <ErrorMessage msg={errMsg} /> : null}\n    </div>\n  )\n}\n\nexport default EnterPassword\n","import React, { useState } from 'react'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport {\n  chainxNodesSelector,\n  addNode,\n  removeNode,\n  setNodeDelay\n} from '../../store/reducers/nodeSlice'\nimport { networkSelector } from '../../store/reducers/settingSlice'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './nodeAction.scss'\nimport getDelay from '../../shared/updateNodeStatus'\n\nfunction AddNode(props) {\n  const [name, setName] = useState('')\n  const [url, setUrl] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const nodeList = useSelector(chainxNodesSelector)\n  const chainId = useSelector(networkSelector)\n  const dispatch = useDispatch()\n\n  const {\n    location: { query }\n  } = props\n\n  let action = ''\n  let title = 'Add node'\n  if (query && query.type === 'edit') {\n    action = 'edit'\n    title = 'Edit node'\n  } else if (query && query.type === 'remove') {\n    action = 'remove'\n    title = 'Delete node'\n  }\n\n  const check = () => {\n    if (!name || !url) {\n      setErrMsg('name and url are required')\n      return false\n    }\n    return true\n  }\n\n  const enter = async () => {\n    if (!check()) {\n      return\n    }\n    try {\n      dispatch(addNode({ chainId, node: { name, url } }))\n      getDelay(nodeList, chainId, dispatch, setNodeDelay)\n      setErrMsg('')\n      props.history.push('/')\n    } catch (error) {\n      setErrMsg(error.message)\n    }\n  }\n\n  const deleteNode = async (name, url) => {\n    if (nodeList.length < 2) {\n      setErrMsg('can not remove the last node')\n      return\n    }\n    try {\n      dispatch(removeNode({ chainId, url }))\n      getDelay(nodeList, chainId, dispatch, setNodeDelay)\n      setErrMsg('')\n      props.history.push('/')\n    } catch (error) {\n      setErrMsg(error.message)\n    }\n  }\n\n  return (\n    <div className=\"node-action\">\n      <span className=\"title\">{title}</span>\n      {action !== 'remove' ? (\n        <>\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n            placeholder=\"Name(12 characters max)\"\n          />\n          <span className=\"node-url\">Node address</span>\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={url}\n            onChange={e => setUrl(e.target.value)}\n            onKeyPress={event => {\n              if (event.key === 'Enter') {\n                enter()\n              }\n            }}\n            placeholder=\"wss://w1.chainx.org/ws\"\n          />\n          <button\n            className=\"button button-yellow margin-top-40\"\n            onClick={() => enter()}\n          >\n            Confirm\n          </button>\n        </>\n      ) : (\n        <button\n          className=\"button button-white margin-top-16\"\n          onClick={() => {\n            deleteNode(query.nodeInfo.name, query.nodeInfo.url)\n          }}\n        >\n          Delete\n        </button>\n      )}\n      {errMsg ? <ErrorMessage msg={errMsg} /> : null}\n    </div>\n  )\n}\n\nexport default AddNode\n","import React from 'react'\nimport './nodeAction.scss'\n\nfunction NodeError() {\n  return (\n    <div className=\"node-error\">\n      <span className=\"msg\">\n        Current node is invalid, please switch node and retry.\n      </span>\n    </div>\n  )\n}\n\nexport default NodeError\n","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Redirect, Route, Switch } from 'react-router'\nimport Home from './Home'\nimport Header from './Header'\nimport CreateAccount from './CreateAccount'\nimport ImportAccount from './ImportAccount'\nimport RequestSign from './RequestSign'\nimport ShowPrivateKey from './ShowPrivateKey/index'\nimport EnterPassword from './EnterPassword'\nimport NodeAction from './NodeAction'\nimport NodeError from './NodeAction/NodeError'\nimport { setChainx, sleep } from '../shared'\nimport spinner from '../assets/loading.gif'\nimport './index.scss'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setInitLoading } from '../store/reducers/statusSlice'\nimport { currentChainxNodeSelector } from '../store/reducers/nodeSlice'\n\nimport {\n  handleApiResponse,\n  handlePairedResponse,\n  setService\n} from '../services/socketService'\n\nwindow.wallet.socketResponse = data => {\n  if (typeof data === 'string') data = JSON.parse(data)\n  switch (data.type) {\n    case 'api':\n      return handleApiResponse(data.request, data.id)\n    case 'pair':\n      return handlePairedResponse(data.request, data.id)\n    default:\n      return\n  }\n}\n\nsetService(window.sockets)\n\nwindow.sockets.initialize().then(() => console.log('sockets initialized'))\n\nexport default function App() {\n  let redirectUrl = '/'\n\n  const dispatch = useDispatch()\n  const loading = useSelector(state => state.status.loading)\n  const initLoading = useSelector(state => state.status.initLoading)\n  const currentNode = useSelector(currentChainxNodeSelector)\n\n  useEffect(() => {\n    getSetting()\n    // eslint-disable-next-line\n  }, [])\n\n  const getSetting = async () => {\n    Promise.race([setChainx(currentNode.url), sleep(3000)])\n      .catch(e => {\n        console.log(`set Chainx catch error: ${e}`)\n      })\n      .finally(() => {\n        dispatch(setInitLoading(false))\n      })\n  }\n\n  return (\n    <Router>\n      <React.Fragment>\n        <Header props />\n        {(loading || initLoading) && (\n          <div className=\"spinner\">\n            <img src={spinner} alt=\"spinner\" />\n          </div>\n        )}\n        {!initLoading && (\n          <div className=\"content\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/createAccount\" component={CreateAccount} />\n              <Route path=\"/importAccount\" component={ImportAccount} />\n              <Route path=\"/requestSign/:id?\" component={RequestSign} />\n              <Route path=\"/showPrivateKey\" component={ShowPrivateKey} />\n              <Route path=\"/enterPassword\" component={EnterPassword} />\n              <Route path=\"/addNode\" component={NodeAction} />\n              <Route path=\"/nodeError\" component={NodeError} />\n              <Redirect to={redirectUrl} />\n            </Switch>\n          </div>\n        )}\n      </React.Fragment>\n    </Router>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './pages/App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","module.exports = __webpack_public_path__ + \"static/media/extension_logo.329f2527.svg\";","module.exports = __webpack_public_path__ + \"static/media/testnet.3a02305f.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch.58939fba.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.e4f3512f.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.0adb93ce.gif\";"],"sourceRoot":""}