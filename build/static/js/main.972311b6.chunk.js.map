{"version":3,"sources":["shared/useClickOutside.js","shared/fetch.js","shared/updateNodeStatus.js","shared/chainx.js","store/reducers/testSlice.js","store/reducers/constants.js","store/reducers/settingSlice.js","store/utils.js","store/reducers/accountSlice.js","store/reducers/nodeSlice.js","store/reducers/txSlice.js","store/reducers/statusSlice.js","store/reducers/intentionSlice.js","store/reducers/tradeSlice.js","store/reducers/index.js","store/index.js","error.js","constants.js","services/ApiService.js","services/socketService.js","shared/signHelper.js","components/Icon/index.js","pages/Home.js","components/DotInCenterStr/index.js","pages/Header/index.js","components/StaticWarning/index.js","components/ErrorMessage/index.js","components/WarningMessage/index.js","components/NameAndPassword/index.js","pages/CreateAccount/index.js","pages/ImportAccount/index.js","shared/extensionExtrinsic.js","shared/toPrecision.js","shared/constants.js","pages/RequestSign/Transfer.js","pages/RequestSign/CommonTx.js","pages/RequestSign/Trade.js","pages/RequestSign/AssetsProcess.js","pages/RequestSign/Staking.js","pages/RequestSign/index.js","pages/ShowPrivateKey/index.js","pages/EnterPassword/index.js","pages/NodeAction/index.js","pages/App.js","index.js","assets/extension_logo.svg","assets/testnet.svg","assets/switch.svg","assets/warning.png","assets/loading.gif"],"names":["useOutsideClick","ref","callback","handleClick","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","fetchFromWs","startTime","endTime","url","method","params","timeOut","id","Number","Date","now","Math","random","toString","substr","message","JSON","stringify","jsonrpc","request","Promise","resolve","reject","ws","WebSocket","onmessage","m","data","parse","result","wastTime","close","err","onopen","send","onerror","race","resovle","setTimeout","INIT_NODES","name","TESTNET_INIT_NODES","isCurrentNodeInit","node","isTestNet","some","item","getDelay","nodeList","chainId","dispatch","setNodeDelay","a","forEach","then","delay","catch","console","log","chainx","setChainx","nodeUrl","Chainx","isRpcReady","getChainx","replaceBTC","token","testSlice","createSlice","initialState","reducers","setTest","reducer","state","action","payload","text","prepare","actions","CHAINX_MAIN","CHAINX_TEST","events","chainxNetwork","defaultSettingInitialState","version","network","window","settingStore","get","settingSlice","setNetwork","pre","set","sockets","broadcastEvent","from","to","networkSelector","setting","isTestNetSelector","createSelector","extractAccountInfo","account","_","pick","accountStore","chainxMainNetAccounts","currentChainXMainNetAccount","chainxTestNetAccounts","currentChainxTestNetAccount","findTargetAccounts","targetAccounts","Error","accountSlice","addAccount","address","keystore","findIndex","push","setCurrentChainXMainNetAccount","find","removeAccount","index","splice","setCurrentChainXTestNetAccount","chainxAccountsSelector","mainNetAccounts","testNetAccounts","currentChainxAccountSelector","mainNetAccount","testNetAccount","mainNetInitNodes","testNetInitNodes","defaultNodeInitialState","chainxMainNetNodes","currentChainXMainNetNode","chainxTestNetNodes","currentChainXTestNetNode","testnetNodesDelay","mainnetNodesDelay","nodeStore","findTargetNodes","targetNodes","nodeSlice","addNode","n","newNode","includes","nodes","removeNode","length","setCurrentChainXMainNetNode","setCurrentChainXTestNetNode","setCurrentChainXNode","chainxNodesSelector","mainNetNodes","testNetNodes","chainxNodesDelaySelector","currentChainxNodeSelector","mainNetNode","testNetNode","txSlice","toSign","setToSign","clearToSign","toSignSelector","tx","statusSlice","loading","initLoading","homeLoading","setLoading","setInitLoading","setHomeLoading","intentionSlice","intentions","setIntentions","getStake","stake","fetchIntentions","getIntentions","resp","intentionsSelector","tradeSlice","pairs","fee","setPairs","setFee","fetchTradePairs","trade","getTradingPairs","fetchFee","asset","getWithdrawalLimitByToken","feeSelector","pairsSelector","test","testReducer","status","statusReducer","store","configureStore","rootReducer","codes","methods","getAccount","getState","service","ApiService","this","emit","origin","error","code","sign","needBroadcast","currentAccount","Extrinsic","dataId","activateWindow","handleApiResponse","handle","handlePairedResponse","getSignRequest","pass","acceleration","emitInfo","event","socketsEvents","api","extrinsic","SubmittableExtrinsic","fromKeyStore","query","system","accountNonce","publicKey","nonce","signedExtrinsic","toNumber","blockHash","genesisHash","hash","toHex","hex","getCurrentGas","setErrMsg","setCurrentGas","module","args","call","Uint8Array","Object","values","submittable","_currentGas","getFeeSync","Icon","props","className","style","Home","useRef","useState","showAccountAction","setShowAccountAction","useSelector","copySuccess","setCopySuccess","history","pathname","setCopyEvent","ClipboardJS","on","operateAccount","type","getUnapprovedTxs","onClick","data-clipboard-text","src","logo","alt","DotInCenterStr","simpleStr","value","slice","getDotInCenterStr","withRouter","refNodeList","refAccountList","showNodeListArea","setShowNodeListArea","showAccountArea","setShowAccountArea","copyText","setCopyText","accounts","currentNode","nodesDelay","useDispatch","getDelayClass","testNetImg","location","replace","toLowerCase","map","key","setNode","split","stopPropagation","nativeEvent","stopImmediatePropagation","nodeInfo","switchImg","data-tip","data-for","effect","globalEventOff","afterHide","StaticWarning","title","desc","warningIcon","ErrorMessage","msg","NameAndPassword","secret","onSuccess","repass","obj","setObj","errMsg","Account","setNet","sameAccount","create","encrypt","required","onChange","placeholder","onKeyPress","CreateAccount","currentStep","setCurrentStep","newMnemonic","mnemonic","mnemonicList","Array","fill","wordSelectedList","setWordSelectedList","shuffle","shuffleMnemonicList","validateMnemonicList","setValidateMnemonicList","mnemonicWords","clearErrMsg","wordSelected","wordIndex","indexOf","replaceWord","reverse","s","join","ImportAccount","currentTabIndex","setCurrentTabIndex","pk","setPk","setMnemonicList","titleList","checkStep1","trim","meta","entries","require","parseData","ex","stringCamelCase","methodName","argsArr","toPrecision","precision","showPrecision","BigNumber","dividedBy","pow","toFixed","argsWithName","arg","getPrecision","assets","currency","getPublicKey","decodeAddress","RequestSign","setPass","currentGas","setAcceleration","txPanel","setTxPanel","assign","newQuery","setNewQuery","parseQuery","updateTxPanel","fetchRelevantInfo","_txPanel","Transfer","Trade","AssetsProcess","Staking","CommonTx","removeCurrentSign","onbeforeunload","defaultValue","v","aria-labelledby","valueLabelDisplay","step","marks","label","min","max","size","ShowPrivateKey","EnterPassword","exportPk","password","privateKey","_removeAccount","enter","AddNode","setName","setUrl","deleteNode","wallet","socketResponse","initialize","ReactDOM","render","getSetting","sleep","time","finally","Fragment","spinner","exact","path","component","NodeAction","getElementById","exports"],"mappings":"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","file":"static/js/main.972311b6.chunk.js","sourcesContent":["import { useEffect } from 'react'\n\nconst useOutsideClick = (ref, callback) => {\n  const handleClick = e => {\n    if (ref.current && !ref.current.contains(e.target)) {\n      callback()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick)\n\n    return () => {\n      document.removeEventListener('click', handleClick)\n    }\n  })\n}\n\nexport default useOutsideClick\n","const fetchFromWs = ({ url, method, params = [], timeOut = 5000 }) => {\n  const id = Number(\n    Date.now() +\n      Math.random()\n        .toString()\n        .substr(2, 3)\n  ).toString(36)\n  const message = JSON.stringify({ id, jsonrpc: '2.0', method, params })\n  let startTime\n  let endTime\n  const request = () =>\n    new Promise((resolve, reject) => {\n      const ws = new WebSocket(url)\n      ws.onmessage = m => {\n        try {\n          const data = JSON.parse(m.data)\n          if (data.id === id) {\n            endTime = Date.now()\n            resolve({\n              data: data.result,\n              wastTime: endTime - startTime\n            })\n            ws.close()\n          }\n        } catch (err) {\n          reject(err)\n        }\n      }\n      ws.onopen = () => {\n        startTime = Date.now()\n        ws.send(message)\n      }\n      ws.onerror = err => {\n        ws.close()\n        reject(err)\n      }\n    })\n  if (timeOut) {\n    return Promise.race([\n      request(),\n      new Promise((resovle, reject) => {\n        setTimeout(() => {\n          reject('请求超时')\n        }, timeOut)\n      })\n    ])\n  } else {\n    return request()\n  }\n}\n\nexport default fetchFromWs\n","import fetchFromWs from './fetch'\n\nconst TIMEOUT = 7000\nconst INIT_NODES = [\n  {\n    name: 'w1.org',\n    url: 'wss://w1.chainx.org/ws'\n  },\n  {\n    name: 'w2.org',\n    url: 'wss://w2.chainx.org/ws'\n  },\n  {\n    name: 'HashQuark',\n    url: 'wss://chainx.hashquark.io'\n  },\n  {\n    name: 'BuildLinks',\n    url: 'wss://chainx.buildlinks.org'\n  },\n  {\n    name: 'w1.cn',\n    url: 'wss://w1.chainx.org.cn/ws'\n  }\n]\n\nconst TESTNET_INIT_NODES = [\n  {\n    name: 'testnet.w1.org.cn',\n    url: 'wss://testnet.w1.chainx.org.cn/ws'\n  }\n]\n\nexport const isCurrentNodeInit = (node, isTestNet) => {\n  let result = false\n  if (isTestNet) {\n    result = TESTNET_INIT_NODES.some(item => item.url === node.url)\n  } else {\n    result = INIT_NODES.some(item => item.url === node.url)\n  }\n  return result\n}\n\nconst getDelay = async (nodeList, chainId, dispatch, setNodeDelay) => {\n  nodeList.forEach(item => {\n    fetchFromWs({\n      url: item.url,\n      method: 'chain_getBlock',\n      timeOut: TIMEOUT\n    })\n      .then((result = {}) => {\n        if (result.data) {\n          dispatch(\n            setNodeDelay({ chainId, url: item.url, delay: result.wastTime })\n          )\n        }\n      })\n      .catch(err => {\n        console.log('catched', err)\n        dispatch(setNodeDelay({ chainId, url: item.url, delay: 'timeout' }))\n      })\n  })\n}\n\nexport default getDelay\n","import Chainx from 'chainx.js'\n\nlet chainx = null\n\nexport const setChainx = async nodeUrl => {\n  chainx = new Chainx(nodeUrl)\n  await chainx.isRpcReady()\n  return chainx\n}\n\nexport const getChainx = () => {\n  return chainx\n}\n\nexport const replaceBTC = token => {\n  return token === 'BTC' ? 'X-BTC' : token\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst testSlice = createSlice({\n  name: 'test',\n  initialState: 'test',\n  reducers: {\n    setTest: {\n      reducer(state, action) {\n        const { text } = action.payload\n        return text\n      },\n      prepare(text) {\n        return { payload: { text } }\n      }\n    }\n  }\n})\n\nexport const { setTest } = testSlice.actions\n\nexport default testSlice.reducer\n","export const CHAINX_MAIN = 'chainx-mainnet'\nexport const CHAINX_TEST = 'chainx-testnet'\nexport const ACCOUNT_STORE_KEY = 'accounts'\nexport const NODE_STORE_KEY = 'nodes'\nexport const SETTING_STORE_KEY = 'settings'\nexport const events = {\n  ACCOUNT_CHANGE: 'account-change',\n  NODE_CHANGE: 'node-change',\n  NETWORK_CHANGE: 'network-change',\n  TX_STATUS: 'tx-status'\n}\n","import { createSlice, createSelector } from '@reduxjs/toolkit'\nimport {\n  CHAINX_MAIN,\n  CHAINX_TEST,\n  events,\n  SETTING_STORE_KEY\n} from './constants'\n\nexport const chainxNetwork = {\n  MAIN: CHAINX_MAIN,\n  TEST: CHAINX_TEST\n}\n\nconst defaultSettingInitialState = {\n  version: 0,\n  network: chainxNetwork.MAIN\n}\n\nlet initialState =\n  window.settingStore.get(SETTING_STORE_KEY) || defaultSettingInitialState\n\nconst settingSlice = createSlice({\n  name: 'setting',\n  initialState,\n  reducers: {\n    setNetwork(state, { payload }) {\n      const pre = state.network\n      state.network = payload\n      window.settingStore.set(SETTING_STORE_KEY, state)\n\n      if (pre !== payload) {\n        window.sockets.broadcastEvent(events.NETWORK_CHANGE, {\n          from: pre,\n          to: payload\n        })\n      }\n    }\n  }\n})\n\nexport const { setNetwork } = settingSlice.actions\nexport const networkSelector = state => state.setting.network\n\nexport const isTestNetSelector = createSelector(networkSelector, network => {\n  return network === chainxNetwork.TEST\n})\n\nexport default settingSlice.reducer\n","import _ from 'lodash'\n\nexport function extractAccountInfo(account) {\n  if (!account) {\n    return\n  }\n\n  return _.pick(account, ['name', 'address'])\n}\n","import { createSlice, createSelector } from '@reduxjs/toolkit'\nimport {\n  ACCOUNT_STORE_KEY,\n  CHAINX_MAIN,\n  CHAINX_TEST,\n  events\n} from './constants'\nimport { chainxNetwork, networkSelector } from './settingSlice'\nimport { extractAccountInfo } from '../utils'\n\nconst defaultAccountInitialState = {\n  version: 0,\n  chainxMainNetAccounts: [],\n  currentChainXMainNetAccount: null,\n  chainxTestNetAccounts: [],\n  currentChainxTestNetAccount: null\n}\n\nlet initialState =\n  window.accountStore.get(ACCOUNT_STORE_KEY) || defaultAccountInitialState\n\nfunction findTargetAccounts(state, chainId) {\n  let targetAccounts\n  if (CHAINX_MAIN === chainId) {\n    targetAccounts = state.chainxMainNetAccounts\n  } else if (CHAINX_TEST === chainId) {\n    targetAccounts = state.chainxTestNetAccounts\n  } else {\n    throw new Error(`Invalid chainId: ${chainId}`)\n  }\n\n  return targetAccounts\n}\n\nconst accountSlice = createSlice({\n  name: 'account',\n  initialState,\n  reducers: {\n    addAccount(\n      state,\n      {\n        payload: {\n          chainId,\n          account: { name, address, keystore }\n        }\n      }\n    ) {\n      const targetAccounts = findTargetAccounts(state, chainId)\n\n      if (targetAccounts.findIndex(a => a.address === address) >= 0) {\n        return\n      }\n\n      const account = { name, address, keystore }\n      targetAccounts.push(account)\n\n      let pre\n      if (CHAINX_MAIN === chainId) {\n        pre = state.currentChainXMainNetAccount\n        state.currentChainXMainNetAccount = account\n      } else if (CHAINX_TEST === chainId) {\n        pre = state.currentChainxTestNetAccount\n        state.currentChainxTestNetAccount = account\n      }\n      window.accountStore.set(ACCOUNT_STORE_KEY, state)\n\n      window.sockets.broadcastEvent(events.ACCOUNT_CHANGE, {\n        from: extractAccountInfo(pre),\n        to: extractAccountInfo(account)\n      })\n\n      // TODO: 处理存在相同address的情况\n    },\n    setCurrentChainXMainNetAccount(state, { payload: { address } }) {\n      const target = state.chainxMainNetAccounts.find(\n        a => a.address === address\n      )\n      if (!target) {\n        throw new Error(`No ChainX mainnet account with address ${address}`)\n      }\n\n      const pre = state.currentChainXMainNetAccount\n      state.currentChainXMainNetAccount = target\n      window.sockets.broadcastEvent(events.ACCOUNT_CHANGE, {\n        from: extractAccountInfo(pre),\n        to: extractAccountInfo(target)\n      })\n    },\n    removeAccount(state, { payload: { chainId, address } }) {\n      const targetAccounts = findTargetAccounts(state, chainId)\n\n      const index = targetAccounts.findIndex(a => a.address === address)\n      if (index < 0) {\n        return\n      }\n\n      targetAccounts.splice(index, 1)\n      let pre, current\n      if (chainId === CHAINX_MAIN) {\n        pre = state.currentChainXMainNetAccount\n        state.currentChainXMainNetAccount = targetAccounts[0] || null\n        current = targetAccounts[0] || null\n      } else if (chainId === CHAINX_TEST) {\n        pre = state.currentChainxTestNetAccount\n        state.currentChainxTestNetAccount = targetAccounts[0] || null\n        current = targetAccounts[0] || null\n      }\n\n      window.accountStore.set(ACCOUNT_STORE_KEY, state)\n      window.sockets.broadcastEvent(events.ACCOUNT_CHANGE, {\n        from: extractAccountInfo(pre),\n        to: extractAccountInfo(current)\n      })\n\n      // TODO: 处理不存在address的情况\n    },\n    setCurrentChainXTestNetAccount(state, { payload: { address } }) {\n      const target = state.chainxTestNetAccounts.find(\n        a => a.address === address\n      )\n      if (!target) {\n        throw new Error(`No ChainX testnet account with address ${address}`)\n      }\n\n      const pre = state.currentChainXMainNetAccount\n      state.currentChainxTestNetAccount = target\n      window.sockets.broadcastEvent(events.ACCOUNT_CHANGE, {\n        from: extractAccountInfo(pre),\n        to: extractAccountInfo(target)\n      })\n    }\n  }\n})\n\nexport const {\n  addAccount,\n  removeAccount,\n  setCurrentChainXMainNetAccount,\n  setCurrentChainXTestNetAccount\n} = accountSlice.actions\n\nexport const chainxMainNetAccountsSelector = state =>\n  state.account.chainxMainNetAccounts\nexport const chainxTestNetAccountsSelector = state =>\n  state.account.chainxTestNetAccounts\nexport const currentChainXMainNetAccountSelector = state =>\n  state.account.currentChainXMainNetAccount\nexport const currentChainxTestNetAccountSelector = state =>\n  state.account.currentChainxTestNetAccount\n\nexport const chainxAccountsSelector = createSelector(\n  networkSelector,\n  chainxMainNetAccountsSelector,\n  chainxTestNetAccountsSelector,\n  (network, mainNetAccounts, testNetAccounts) => {\n    if (network === chainxNetwork.TEST) {\n      return testNetAccounts\n    } else if (network === chainxNetwork.MAIN) {\n      return mainNetAccounts\n    }\n  }\n)\n\nexport const currentChainxAccountSelector = createSelector(\n  networkSelector,\n  currentChainXMainNetAccountSelector,\n  currentChainxTestNetAccountSelector,\n  (network, mainNetAccount, testNetAccount) => {\n    if (network === chainxNetwork.TEST) {\n      return testNetAccount\n    } else if (network === chainxNetwork.MAIN) {\n      return mainNetAccount\n    }\n  }\n)\n\nexport default accountSlice.reducer\n","import { createSelector, createSlice } from '@reduxjs/toolkit'\nimport { CHAINX_MAIN, CHAINX_TEST, events, NODE_STORE_KEY } from './constants'\nimport { chainxNetwork, networkSelector } from './settingSlice'\n\nexport const mainNetInitNodes = [\n  {\n    name: 'w1.org',\n    url: 'wss://w1.chainx.org/ws'\n  },\n  {\n    name: 'w2.org',\n    url: 'wss://w2.chainx.org/ws'\n  },\n  {\n    name: 'HashQuark',\n    url: 'wss://chainx.hashquark.io'\n  },\n  {\n    name: 'BuildLinks',\n    url: 'wss://chainx.buildlinks.org'\n  },\n  {\n    name: 'w1.cn',\n    url: 'wss://w1.chainx.org.cn/ws'\n  }\n]\n\nexport const testNetInitNodes = [\n  {\n    name: 'testnet.w1.org.cn',\n    url: 'wss://testnet.w1.chainx.org.cn/ws'\n  }\n]\n\nconst defaultNodeInitialState = {\n  version: 0,\n  chainxMainNetNodes: mainNetInitNodes,\n  currentChainXMainNetNode: mainNetInitNodes[0],\n  chainxTestNetNodes: testNetInitNodes,\n  currentChainXTestNetNode: testNetInitNodes[0],\n  testnetNodesDelay: {},\n  mainnetNodesDelay: {}\n}\n\nconst initialState =\n  window.nodeStore.get(NODE_STORE_KEY) || defaultNodeInitialState\n\nfunction findTargetNodes(state, chainId) {\n  let targetNodes\n  if (CHAINX_MAIN === chainId) {\n    targetNodes = state.chainxMainNetNodes\n  } else if (CHAINX_TEST === chainId) {\n    targetNodes = state.chainxTestNetNodes\n  } else {\n    throw new Error(`Invalid chainId: ${chainId}`)\n  }\n\n  return targetNodes\n}\n\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState,\n  reducers: {\n    addNode(\n      state,\n      {\n        payload: {\n          chainId,\n          node: { name, url }\n        }\n      }\n    ) {\n      const targetNodes = findTargetNodes(state, chainId)\n      const target = targetNodes.find(n => n.url === url)\n      if (target) {\n        return\n      }\n\n      const newNode = { name, url }\n      targetNodes.push(newNode)\n      let pre\n      if (CHAINX_MAIN === chainId) {\n        pre = state.currentChainXMainNetNode\n        state.currentChainXMainNetNode = newNode\n      } else if (CHAINX_TEST === chainId) {\n        pre = state.currentChainXTestNetNode\n        state.currentChainXTestNetNode = newNode\n      }\n\n      if ([CHAINX_MAIN, CHAINX_TEST].includes(chainId)) {\n        window.sockets.broadcastEvent(events.NODE_CHANGE, {\n          from: pre,\n          to: newNode\n        })\n      }\n\n      window.nodeStore.set(NODE_STORE_KEY, state)\n    },\n    setNodeDelay(state, { payload: { chainId, url, delay } }) {\n      let nodes = state.testnetNodesDelay\n      if (CHAINX_MAIN === chainId) {\n        nodes = state.mainnetNodesDelay\n      }\n      nodes[url] = delay\n      window.nodeStore.set(NODE_STORE_KEY, state)\n    },\n    removeNode(state, { payload: { chainId, url } }) {\n      const targetNodes = findTargetNodes(state, chainId)\n      if (targetNodes.length <= 1) {\n        return\n      }\n\n      const index = targetNodes.findIndex(n => n.url === url)\n      if (index < 0) {\n        return\n      }\n\n      targetNodes.splice(index, 1)\n\n      let pre = null\n      if (CHAINX_MAIN === chainId) {\n        pre = state.currentChainXMainNetNode\n        state.currentChainXMainNetNode = targetNodes[0] || null\n      } else if (CHAINX_TEST === chainId) {\n        pre = state.currentChainXTestNetNode\n        state.currentChainXTestNetNode = targetNodes[0] || null\n      }\n\n      if ([CHAINX_MAIN, CHAINX_TEST].includes(chainId)) {\n        window.sockets.broadcastEvent(events.NODE_CHANGE, {\n          from: pre,\n          to: targetNodes[0] || null\n        })\n      }\n\n      window.nodeStore.set(NODE_STORE_KEY, state)\n\n      // TODO: 处理不存在url的情况\n    },\n    setCurrentChainXMainNetNode(state, { payload: { url } }) {\n      const target = state.chainxMainNetNodes.find(n => n.url === url)\n      if (!target) {\n        throw new Error(`No ChainX mainnet node with url ${url}`)\n      }\n\n      const pre = state.currentChainXTestNetNode\n      state.currentChainXMainNetNode = target\n      window.nodeStore.set(NODE_STORE_KEY, state)\n      window.sockets.broadcastEvent(events.NODE_CHANGE, {\n        from: pre,\n        to: target\n      })\n    },\n    setCurrentChainXTestNetNode(state, { payload: { url } }) {\n      const target = state.chainxTestNetNodes.find(n => n.url === url)\n      if (!target) {\n        throw new Error(`No ChainX testnet node with url ${url}`)\n      }\n\n      const pre = state.currentChainXTestNetNode\n      state.currentChainXTestNetNode = target\n      window.nodeStore.set(NODE_STORE_KEY, state)\n      window.sockets.broadcastEvent(events.NODE_CHANGE, {\n        from: pre,\n        to: target\n      })\n    },\n    setCurrentChainXNode(state, { payload: { chainId, url } }) {\n      const targetNodes = findTargetNodes(state, chainId)\n      if (!targetNodes) {\n        return\n      }\n\n      const target = targetNodes.find(n => n.url === url)\n      if (!target) {\n        return\n      }\n\n      let pre\n      if (CHAINX_MAIN === chainId) {\n        pre = state.currentChainXMainNetNode\n        state.currentChainXMainNetNode = target\n      } else if (CHAINX_TEST === chainId) {\n        pre = state.currentChainXTestNetNode\n        state.currentChainXTestNetNode = target\n      }\n\n      window.nodeStore.set(NODE_STORE_KEY, state)\n      window.sockets.broadcastEvent(events.NODE_CHANGE, {\n        from: pre,\n        to: target\n      })\n    }\n  }\n})\n\nexport const {\n  addNode,\n  removeNode,\n  setCurrentChainXMainNetNode,\n  setCurrentChainXTestNetNode,\n  setCurrentChainXNode,\n  setNodeDelay\n} = nodeSlice.actions\n\nexport const chainxMainNetNodesSelector = state => state.node.chainxMainNetNodes\nexport const chainxTestNetNodesSelector = state => state.node.chainxTestNetNodes\nexport const currentChainXMainNetNodeSelector = state =>\n  state.node.currentChainXMainNetNode\nexport const currentChainXTestNetNodeSelector = state =>\n  state.node.currentChainXTestNetNode\n\nexport const chainxNodesSelector = createSelector(\n  networkSelector,\n  chainxMainNetNodesSelector,\n  chainxTestNetNodesSelector,\n  (network, mainNetNodes, testNetNodes) => {\n    if (network === chainxNetwork.TEST) {\n      return testNetNodes\n    } else if (network === chainxNetwork.MAIN) {\n      return mainNetNodes\n    }\n  }\n)\n\nexport const chainxNodesDelaySelector = createSelector(\n  networkSelector,\n  state => state.node.mainnetNodesDelay,\n  state => state.node.testnetNodesDelay,\n  (network, mainnetNodesDelay, testnetNodesDelay) => {\n    if (network === chainxNetwork.TEST) {\n      return testnetNodesDelay\n    } else if (network === chainxNetwork.MAIN) {\n      return mainnetNodesDelay\n    }\n  }\n)\n\nexport const currentChainxNodeSelector = createSelector(\n  networkSelector,\n  currentChainXMainNetNodeSelector,\n  currentChainXTestNetNodeSelector,\n  (network, mainNetNode, testNetNode) => {\n    if (network === chainxNetwork.TEST) {\n      return testNetNode\n    } else if (network === chainxNetwork.MAIN) {\n      return mainNetNode\n    }\n  }\n)\n\nexport default nodeSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  version: 0,\n  toSign: null\n}\n\nconst txSlice = createSlice({\n  name: 'tx',\n  initialState,\n  reducers: {\n    setToSign(state, { payload }) {\n      state.toSign = payload\n    },\n    clearToSign(state) {\n      // TODO: 切换网络是清掉toSign\n      state.toSign = null\n    }\n  }\n})\n\nexport const { setToSign, clearToSign } = txSlice.actions\n\nexport const toSignSelector = state => state.tx.toSign\n\nexport default txSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst statusSlice = createSlice({\n  name: 'status',\n  initialState: {\n    loading: false,\n    initLoading: true,\n    homeLoading: true\n  },\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload\n    },\n    setInitLoading: (state, action) => {\n      state.initLoading = action.payload\n    },\n    setHomeLoading: (state, action) => {\n      state.homeLoading = action.payload\n    }\n  }\n})\n\nexport const {\n  setLoading,\n  setInitLoading,\n  setHomeLoading\n} = statusSlice.actions\n\nexport default statusSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { getChainx } from '../../shared/chainx'\n\nconst intentionSlice = createSlice({\n  name: 'intentions',\n  initialState: {\n    intentions: {}\n  },\n  reducers: {\n    setIntentions: {\n      reducer(state, action) {\n        state.intentions = action.payload\n      }\n    }\n  }\n})\n\nexport const { setIntentions } = intentionSlice.actions\n\nasync function getStake(isTestNet) {\n  const chainx = getChainx()\n  const { stake } = chainx\n\n  return stake\n}\n\nexport const fetchIntentions = isTestNet => async dispatch => {\n  const stake = await getStake(isTestNet)\n\n  const resp = await stake.getIntentions()\n  const result = {}\n  resp.forEach(item => {\n    result[item.account] = item.name\n  })\n  dispatch(setIntentions(result))\n}\n\nexport const intentionsSelector = state => {\n  return state.intentions.intentions\n}\n\nexport default intentionSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { getChainx } from '../../shared/chainx'\n\nconst tradeSlice = createSlice({\n  name: 'trade',\n  initialState: {\n    pairs: {},\n    fee: 0\n  },\n  reducers: {\n    setPairs: (state, action) => {\n      state.pairs = action.payload\n    },\n    setFee: (state, action) => {\n      state.fee = action.payload\n    }\n  }\n})\n\nexport const { setPairs, setFee } = tradeSlice.actions\n\nexport const fetchTradePairs = isTestNet => async dispatch => {\n  const chainx = getChainx()\n\n  const { trade } = chainx\n\n  const pairs = await trade.getTradingPairs()\n  const result = {}\n  pairs.forEach(item => {\n    result[item.id] = item\n  })\n  dispatch(setPairs(result))\n}\n\nexport const fetchFee = isTestNet => async dispatch => {\n  const chainx = getChainx()\n\n  const { asset } = chainx\n\n  const resp = await asset.getWithdrawalLimitByToken(['BTC'])\n  dispatch(setFee(resp.fee))\n}\n\nexport const feeSelector = state => state.trade.fee\nexport const pairsSelector = state => state.trade.pairs\n\nexport default tradeSlice.reducer\n","import testReducer from './testSlice'\nimport account from './accountSlice'\nimport node from './nodeSlice'\nimport setting from './settingSlice'\nimport tx from './txSlice'\nimport statusReducer from './statusSlice'\nimport intentionSlice from './intentionSlice'\nimport tradeSlice from './tradeSlice'\n\nexport default {\n  test: testReducer,\n  status: statusReducer,\n  intentions: intentionSlice,\n  trade: tradeSlice,\n  account,\n  node,\n  setting,\n  tx\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nconst store = configureStore({ reducer: rootReducer })\nexport default store\n","export const codes = {\n  INVALID_ADDRESS: 'invalid-address',\n  INVALID_MODULE: 'invalid-module',\n  INVALID_METHOD: 'invalid-method',\n  INVALID_SIGN_DATA: 'invalid-sign-data',\n  SIGN_BUSY: 'sign-transaction-busy',\n  INVALID_NETWORK: 'invalid-network',\n  TX_STATUS_ERROR: 'tx-status-error',\n  UNKNOWN: 'unknown'\n}\n","export const methods = {\n  getAccount: 'chainx_account',\n  getSettings: 'get_settings',\n  signChainxExtrinsic: 'chainx_sign',\n  signAndSendChainXExtrinsic: 'chainx_sign_send'\n}\n","import store from '../store'\nimport {\n  chainxAccountsSelector,\n  currentChainxAccountSelector\n} from '../store/reducers/accountSlice'\nimport _ from 'lodash'\nimport { codes } from '../error'\nimport { setToSign, toSignSelector } from '../store/reducers/txSlice'\nimport { Extrinsic } from '@chainx/types'\nimport { methods } from '../constants'\n\nfunction getAccount() {\n  const state = store.getState()\n  const account = currentChainxAccountSelector(state)\n  return {\n    result: _.pick(account, ['name', 'address'])\n  }\n}\n\nfunction getSettings() {\n  const state = store.getState()\n  const settings = state.setting\n\n  return {\n    result: settings\n  }\n}\n\nconst type = 'api'\nexport default class ApiService {\n  constructor(sockets, request, id) {\n    this.sockets = sockets // 就是LowLevelSocketService\n    this.request = request\n    this.id = id\n  }\n\n  async handle() {\n    const data = this.request.data.payload\n\n    if (!data.method) {\n      return this.sockets.emit(this.request.data.origin, this.id, type, {\n        id: data.id,\n        error: {\n          code: -1,\n          message: 'method not found'\n        }\n      })\n    }\n\n    switch (data.method) {\n      case methods.getSettings:\n        return this.emit(getSettings())\n      case methods.getAccount:\n        return this.emit(getAccount())\n      case methods.signAndSendChainXExtrinsic: {\n        return this.sign(data.id, ...data.params, true)\n      }\n      case methods.signChainxExtrinsic: {\n        return this.sign(data.id, ...data.params, false)\n      }\n      default: {\n        return {\n          error: {\n            code: -1,\n            message: `${data.method} not found`\n          }\n        }\n      }\n    }\n  }\n\n  emit(data) {\n    this.sockets.emit(this.request.data.origin, this.id, type, {\n      id: this.request.data.payload.id,\n      ...data\n    })\n  }\n\n  static getAccounts() {\n    const state = store.getState()\n    const accounts = chainxAccountsSelector(state)\n    return {\n      result: accounts\n    }\n  }\n\n  async sign(id, from, data, needBroadcast) {\n    const state = store.getState()\n    const currentAccount = currentChainxAccountSelector(state)\n    if (!currentAccount || currentAccount.address !== from) {\n      this.emit({\n        error: {\n          code: codes.INVALID_ADDRESS,\n          message: `${from} not found`\n        }\n      })\n    }\n\n    if (!from || !data) {\n      return this.emit({\n        error: {\n          code: codes.INVALID_SIGN_DATA,\n          message: 'invalid sign params'\n        }\n      })\n    }\n\n    const currentToSign = toSignSelector(state)\n    if (currentToSign) {\n      return this.emit({\n        error: {\n          code: codes.SIGN_BUSY,\n          message: 'sign busy'\n        }\n      })\n    }\n\n    try {\n      new Extrinsic(data)\n    } catch (e) {\n      return this.emit({\n        error: {\n          code: codes.INVALID_SIGN_DATA,\n          message: 'invalid sign data'\n        }\n      })\n    }\n\n    store.dispatch(\n      setToSign({\n        origin: this.request.data.origin,\n        id: this.id,\n        dataId: id,\n        address: from,\n        data,\n        needBroadcast: !!needBroadcast\n      })\n    )\n\n    this.sockets.activateWindow()\n  }\n}\n","import ApiService from './ApiService'\n\nexport let service\n\n// 就是LowLevelSocketService\nexport function setService(s) {\n  service = s\n}\n\nexport const handleApiResponse = async (request, id) => {\n  // @todo 校验 appkey。校验 nonce\n  await new ApiService(service, request, id).handle()\n}\n\nexport const handlePairedResponse = async (request, id) => {\n  // TODO: 外部dapp请求连接，打开确认框让用户确认\n  return await service.emit(request.data.origin, id, 'paired', true)\n}\n","import { getChainx } from './chainx'\nimport { service } from '../services/socketService'\nimport store from '../store'\nimport { toSignSelector } from '../store/reducers/txSlice'\nimport { currentChainxAccountSelector } from '../store/reducers/accountSlice'\nimport { codes } from '../error'\nimport { events as socketsEvents } from '../store/reducers/constants'\nimport { SubmittableExtrinsic } from 'chainx.js'\n\nexport const getSignRequest = async (pass, acceleration) => {\n  const state = store.getState()\n  const { origin, id, data, dataId, needBroadcast } = toSignSelector(state)\n  const currentAccount = currentChainxAccountSelector(state)\n\n  const chainx = getChainx()\n  const api = chainx.api\n  let extrinsic\n  try {\n    extrinsic = new SubmittableExtrinsic(chainx.api, data)\n  } catch (e) {\n    service.emit(origin, id, 'api', {\n      id: dataId,\n      error: {\n        code: codes.INVALID_SIGN_DATA,\n        message: 'invalid sign data'\n      }\n    })\n  }\n  const account = chainx.account.fromKeyStore(currentAccount.keystore, pass)\n  const nonce = await api.query.system.accountNonce(account.publicKey())\n  const signedExtrinsic = extrinsic.sign(account, {\n    nonce: nonce.toNumber(),\n    acceleration,\n    blockHash: api.genesisHash\n  })\n\n  const hash = signedExtrinsic.hash.toHex()\n  service.emit(origin, id, 'api', {\n    id: dataId,\n    result: {\n      hash,\n      hex: signedExtrinsic.toHex()\n    }\n  })\n\n  if (!needBroadcast) {\n    return\n  }\n\n  function emitInfo(err, status) {\n    return service.emit(origin, id, 'event', {\n      event: socketsEvents.TX_STATUS,\n      payload: {\n        id: dataId,\n        err: err || null,\n        status: status || null\n      }\n    })\n  }\n\n  try {\n    await signedExtrinsic.send(emitInfo)\n  } catch (e) {\n    return emitInfo(e)\n  }\n\n  console.log('returned')\n}\n\nexport const getCurrentGas = async (\n  currentAccount,\n  query,\n  setErrMsg,\n  setCurrentGas\n) => {\n  const chainx = getChainx()\n\n  const { address, module, method, args } = query\n\n  const call = chainx.api.tx[module][method]\n\n  if (!call) {\n    setErrMsg('Invalid method')\n    return\n  }\n\n  if (currentAccount.address !== address) {\n    setErrMsg('Invalid address')\n    return\n  }\n\n  if (method === 'putCode') {\n    args[1] = Uint8Array.from(Object.values(args[1]))\n  }\n\n  const submittable = call(...args)\n  const _currentGas = submittable.getFeeSync(currentAccount.address, 1)\n\n  setCurrentGas(_currentGas)\n}\n","import React from 'react'\n\nfunction Icon(props) {\n  const { className = {}, style = {}, name = '' } = props\n  return <i className={`iconfont icon${name} ${className}`} style={style} />\n}\n\nexport default Icon\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useOutsideClick } from '../shared'\nimport { useSelector } from 'react-redux'\nimport ClipboardJS from 'clipboard'\nimport Icon from '../components/Icon'\nimport './index.scss'\nimport logo from '../assets/extension_logo.svg'\nimport { currentChainxAccountSelector } from '../store/reducers/accountSlice'\nimport { isTestNetSelector } from '../store/reducers/settingSlice'\n\nfunction Home(props) {\n  const ref = useRef(null)\n  const [showAccountAction, setShowAccountAction] = useState(false)\n  const isTestNet = useSelector(isTestNetSelector)\n  const [copySuccess, setCopySuccess] = useState('')\n  const currentAccount = useSelector(currentChainxAccountSelector)\n  const toSign = useSelector(state => state.tx.toSign)\n\n  useEffect(() => {\n    getUnapprovedTxs()\n    // eslint-disable-next-line\n  }, [isTestNet, toSign])\n\n  useOutsideClick(ref, () => {\n    setShowAccountAction(false)\n  })\n\n  async function getUnapprovedTxs() {\n    try {\n      if (toSign) {\n        props.history.push({\n          pathname: '/requestSign/' + toSign.id,\n          query: toSign\n        })\n      }\n    } catch (error) {\n      console.log('sign request error occurs ', error)\n    } finally {\n      setCopyEvent()\n    }\n  }\n\n  function setCopyEvent() {\n    const clipboard = new ClipboardJS('.copy')\n    clipboard.on('success', function() {\n      setCopySuccess('Copied!')\n      setTimeout(() => {\n        setCopySuccess('')\n      }, 2000)\n    })\n  }\n\n  async function operateAccount(type) {\n    if (currentAccount.address) {\n      props.history.push({\n        pathname: '/enterPassword',\n        query: {\n          address: currentAccount.address,\n          keystore: currentAccount.keystore,\n          type: type\n        }\n      })\n    }\n    setShowAccountAction(false)\n  }\n\n  return (\n    <>\n      {currentAccount ? (\n        <div className=\"container-account\">\n          <div className=\"account-title\">\n            <span className=\"name\">{currentAccount.name}</span>\n            <div\n              ref={ref}\n              className=\"arrow\"\n              onClick={() => {\n                setShowAccountAction(!showAccountAction)\n              }}\n            >\n              <Icon className=\"arrow-icon\" name=\"Arrowdown\" />\n            </div>\n            {showAccountAction ? (\n              <div className=\"account-action\">\n                <span onClick={() => operateAccount('export')}>\n                  Export PrivateKey\n                </span>\n                <span onClick={() => operateAccount('remove')}>\n                  Forget Account\n                </span>\n              </div>\n            ) : null}\n          </div>\n          <div className=\"account-address\">\n            <span>{currentAccount.address}</span>\n          </div>\n          <button className=\"copy\" data-clipboard-text={currentAccount.address}>\n            <Icon className=\"copy-icon\" name=\"copy\" />\n            <span className=\"copy-text\">Copy</span>\n          </button>\n          <span>{copySuccess}</span>\n        </div>\n      ) : (\n        <div className=\"container container-column container-no-account\">\n          <div className=\"home-logo\">\n            <img src={logo} alt=\"logo\" />\n          </div>\n          <button\n            className=\"button button-white button-new-account\"\n            onClick={() => props.history.push('/createAccount')}\n          >\n            New Account\n          </button>\n          <button\n            className=\"button button-white button-import-account\"\n            onClick={() => props.history.push('/importAccount')}\n          >\n            Import Account\n          </button>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Home\n","import React from 'react'\n\nfunction getDotInCenterStr(value) {\n  if (value && value.length > 13) {\n    const length = value.length\n    return value.slice(0, 5) + '...' + value.slice(length - 5, length)\n  }\n  return value\n}\n\nfunction DotInCenterStr(props) {\n  const { value } = props\n  const simpleStr = getDotInCenterStr(value)\n\n  return <span>{simpleStr}</span>\n}\n\nexport default DotInCenterStr\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport ClipboardJS from 'clipboard'\nimport ReactTooltip from 'react-tooltip'\nimport { isCurrentNodeInit, useOutsideClick } from '../../shared'\nimport Icon from '../../components/Icon'\nimport DotInCenterStr from '../../components/DotInCenterStr'\nimport logo from '../../assets/extension_logo.svg'\nimport testNetImg from '../../assets/testnet.svg'\nimport switchImg from '../../assets/switch.svg'\nimport './header.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  isTestNetSelector,\n  networkSelector,\n  setNetwork\n} from '../../store/reducers/settingSlice'\nimport {\n  chainxAccountsSelector,\n  currentChainxAccountSelector,\n  setCurrentChainXMainNetAccount,\n  setCurrentChainXTestNetAccount\n} from '../../store/reducers/accountSlice'\nimport { CHAINX_MAIN, CHAINX_TEST } from '../../store/reducers/constants'\nimport {\n  chainxNodesDelaySelector,\n  chainxNodesSelector,\n  currentChainxNodeSelector,\n  setCurrentChainXNode,\n  setNodeDelay\n} from '../../store/reducers/nodeSlice'\nimport getDelay from '../../shared/updateNodeStatus'\n\nfunction Header(props) {\n  const refNodeList = useRef(null)\n  const refAccountList = useRef(null)\n  const [showNodeListArea, setShowNodeListArea] = useState(false)\n  const [showAccountArea, setShowAccountArea] = useState(false)\n  const [copyText, setCopyText] = useState('Copy')\n  const currentAccount = useSelector(currentChainxAccountSelector)\n  const accounts = useSelector(chainxAccountsSelector)\n  const currentNode = useSelector(currentChainxNodeSelector)\n  const nodeList = useSelector(chainxNodesSelector)\n  const chainId = useSelector(networkSelector)\n  const isTestNet = useSelector(isTestNetSelector)\n  const nodesDelay = useSelector(chainxNodesDelaySelector)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    setCopyEvent()\n    getDelay(nodeList, chainId, dispatch, setNodeDelay)\n    // eslint-disable-next-line\n  }, [isTestNet, chainId, nodeList])\n\n  useOutsideClick(refNodeList, () => {\n    setShowNodeListArea(false)\n  })\n\n  useOutsideClick(refAccountList, () => {\n    setShowAccountArea(false)\n  })\n\n  function setCopyEvent() {\n    const clipboard = new ClipboardJS('.account-copy')\n    clipboard.on('success', function() {\n      setCopyText('Copied!')\n    })\n  }\n\n  async function setNode(url) {\n    dispatch(setCurrentChainXNode({ chainId, url }))\n    setShowNodeListArea(false)\n  }\n\n  function getDelayClass(delay) {\n    if (delay === 'timeout') {\n      return 'red'\n    } else if (delay > 300) {\n      return 'yellow'\n    } else if (delay <= 300) {\n      return 'green'\n    } else {\n      return 'green'\n    }\n  }\n\n  function getDelayText(delay) {\n    return delay ? (delay === 'timeout' ? 'timeout' : delay + ' ms') : ''\n  }\n\n  function switchNet() {\n    dispatch(setNetwork(isTestNet ? CHAINX_MAIN : CHAINX_TEST))\n    setShowNodeListArea(false)\n    props.history.push('/')\n  }\n\n  return (\n    <div className=\"header\">\n      <div className=\"container container-header\">\n        <Link to=\"/\">\n          <img className=\"logo\" src={logo} alt=\"logo\" />\n          {isTestNet && (\n            <img className=\"testnet\" src={testNetImg} alt=\"testNetImg\" />\n          )}\n        </Link>\n        {props.history.location.pathname.includes('requestSign') ? (\n          <div className=\"center-title\">\n            <span>\n              {(\n                (props.history.location.query &&\n                  props.history.location.query.method) ||\n                ''\n              )\n                .replace(/([A-Z])/g, ' $1')\n                .toLowerCase() || 'Sign Request'}\n            </span>\n          </div>\n        ) : (\n          <div className=\"right\">\n            <div\n              ref={refNodeList}\n              className=\"current-node\"\n              onClick={() => {\n                setShowNodeListArea(!showNodeListArea)\n                setShowAccountArea(false)\n              }}\n            >\n              <span\n                className={\n                  'dot ' + getDelayClass(nodesDelay[currentNode.url]) + '-bg'\n                }\n              />\n              <span>{currentNode && currentNode.name}</span>\n            </div>\n            <div\n              ref={refAccountList}\n              className=\"setting\"\n              onClick={() => {\n                setShowAccountArea(!showAccountArea)\n                setShowNodeListArea(false)\n              }}\n            >\n              <Icon name=\"Menu\" className=\"setting-icon\" />\n            </div>\n          </div>\n        )}\n        {\n          <div className={(showNodeListArea ? '' : 'hide ') + 'node-list-area'}>\n            <div className=\"node-list\">\n              {currentNode &&\n                (nodeList || []).map((item, index) => (\n                  <div\n                    className={\n                      item.name === currentNode.name\n                        ? 'node-item active'\n                        : 'node-item'\n                    }\n                    key={item.name}\n                    onClick={() => {\n                      setNode(item.url)\n                    }}\n                  >\n                    <div className=\"node-item-active-flag\" />\n                    <div className=\"node-item-detail\">\n                      <div className=\"node-item-detail-url\">\n                        <span className=\"url\">\n                          {item.url.split('//')[1] || item.url}\n                        </span>\n                        <div\n                          className={\n                            isCurrentNodeInit(item, isTestNet)\n                              ? 'node-item-detail-edit'\n                              : 'node-item-detail-edit custom'\n                          }\n                          onClick={e => {\n                            e.stopPropagation()\n                            e.nativeEvent.stopImmediatePropagation()\n                            setShowNodeListArea(false)\n                            const query = {\n                              nodeInfo: item,\n                              type: 'remove'\n                            }\n                            props.history.push({\n                              pathname: '/addNode',\n                              query: query\n                            })\n                          }}\n                        >\n                          <Icon name=\"Edit\" />\n                        </div>\n                      </div>\n                      <span\n                        className={\n                          'delay ' + getDelayClass(nodesDelay[item.url])\n                        }\n                      >\n                        {getDelayText(nodesDelay[item.url])}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n            </div>\n            <div\n              className=\"add-node node-action-item\"\n              onClick={() => {\n                props.history.push('/addNode')\n              }}\n            >\n              <Icon name=\"Add\" className=\"add-node-icon node-action-item-img\" />\n              <span>Add node</span>\n            </div>\n            <div\n              className=\"switch-net node-action-item\"\n              onClick={() => {\n                switchNet()\n              }}\n            >\n              <img\n                className=\"node-action-item-img\"\n                src={switchImg}\n                alt=\"switchImg\"\n              />\n              <span>Switch to {isTestNet ? 'Mainnet' : 'Testnet'}</span>\n            </div>\n          </div>\n        }\n        {showAccountArea && !showNodeListArea ? (\n          <div className=\"account-area\">\n            <div className=\"action\">\n              <div\n                onClick={() => {\n                  setShowAccountArea(false)\n                  props.history.push('/importAccount')\n                }}\n              >\n                <Icon name=\"Putin\" className=\"account-area-icon\" />\n                <span>Import</span>\n              </div>\n              <div\n                onClick={() => {\n                  setShowAccountArea(false)\n                  props.history.push('/createAccount')\n                }}\n              >\n                <Icon name=\"Add\" className=\"account-area-icon\" />\n                <span>New</span>\n              </div>\n            </div>\n            {accounts.length > 0 ? (\n              <div className=\"accounts\">\n                {accounts.length > 0 &&\n                  accounts.map(item => (\n                    <div\n                      className={\n                        item.address === currentAccount.address\n                          ? 'account-item active'\n                          : 'account-item'\n                      }\n                      key={item.name}\n                      onClick={async () => {\n                        if (isTestNet) {\n                          dispatch(\n                            setCurrentChainXTestNetAccount({\n                              address: item.address\n                            })\n                          )\n                        } else {\n                          dispatch(\n                            setCurrentChainXMainNetAccount({\n                              address: item.address\n                            })\n                          )\n                        }\n                        setShowAccountArea(false)\n                        props.history.push('/')\n                      }}\n                    >\n                      <div className=\"account-item-active-flag\" />\n                      <div className=\"account-item-detail\">\n                        <span className=\"name\">{item.name}</span>\n                        <div className=\"address\">\n                          <DotInCenterStr value={item.address} />\n                          <button\n                            className=\"account-copy\"\n                            data-clipboard-text={item.address}\n                            onClick={e => {\n                              e.stopPropagation()\n                              e.nativeEvent.stopImmediatePropagation()\n                            }}\n                            data-tip\n                            data-for=\"copy-address-tooltip\"\n                          >\n                            <Icon className=\"copy-icon\" name=\"copy\" />\n                          </button>\n                          <ReactTooltip\n                            id=\"copy-address-tooltip\"\n                            effect=\"solid\"\n                            globalEventOff=\"click\"\n                            className=\"extension-tooltip\"\n                            afterHide={() => setCopyText('Copy')}\n                          >\n                            <span>{copyText}</span>\n                          </ReactTooltip>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(Header)\n","import React from 'react'\n// @ts-ignore\nimport warningIcon from '../../assets/warning.png'\nimport './index.scss'\n\nfunction StaticWarning(props) {\n  const {\n    title = '',\n    desc = 'Do not store the mnemonic words in your PC or Net. Anybody can take your assets with the mnemonic words.'\n  } = props\n\n  return (\n    <div className=\"static-warning\">\n      <img className=\"warning-icon\" src={warningIcon} alt=\"warning\" />\n      <span className=\"warning-title\">{title}</span>\n      <div className=\"warning-desc\">{desc}</div>\n    </div>\n  )\n}\n\nexport default StaticWarning\n","import React from 'react'\nimport './index.scss'\n\nfunction ErrorMessage(props) {\n  const { msg } = props\n\n  return (\n    <div className=\"error-message\">\n      <span>{msg}</span>\n    </div>\n  )\n}\n\nexport default ErrorMessage\n","import React from 'react'\nimport './index.scss'\n\nexport default function(props) {\n  const { msg } = props\n\n  return (\n    <div className=\"warning-message\">\n      <span>{msg}</span>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Account } from 'chainx.js'\nimport ErrorMessage from '../ErrorMessage'\nimport WarningMessage from '../WarningMessage'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { isTestNetSelector } from '../../store/reducers/settingSlice'\nimport { CHAINX_MAIN, CHAINX_TEST } from '../../store/reducers/constants'\nimport {\n  addAccount,\n  chainxAccountsSelector\n} from '../../store/reducers/accountSlice'\n\nfunction NameAndPassword(props) {\n  const { secret, onSuccess } = props\n  const [obj, setObj] = useState({ name: '', pass: '', repass: '' })\n  const [errMsg, setErrMsg] = useState('')\n  const accounts = useSelector(chainxAccountsSelector)\n  const isTestNet = useSelector(isTestNetSelector)\n  const dispatch = useDispatch()\n\n  Account.setNet(isTestNet ? 'testnet' : 'mainnet')\n  const account = Account.from(secret)\n  const address = account.address()\n  const sameAccount = (accounts || []).find(\n    account => account.address === address\n  )\n\n  const check = () => {\n    if (!obj.name || !obj.pass || !obj.repass) {\n      setErrMsg('name and password are required')\n      return false\n    }\n    if (obj.pass.length < 8) {\n      setErrMsg('password length must great than 8')\n      return false\n    }\n    if (!/(?=.*[a-z])(?=.*[A-Z])/.test(obj.pass)) {\n      setErrMsg('password must include lower and upper characters')\n      return false\n    }\n    if (obj.pass !== obj.repass) {\n      setErrMsg('password is not match')\n      return false\n    }\n    return true\n  }\n\n  const create = async () => {\n    if (!check()) {\n      return\n    }\n\n    const keystore = account.encrypt(obj.pass)\n\n    dispatch(\n      addAccount({\n        chainId: isTestNet ? CHAINX_TEST : CHAINX_MAIN,\n        account: { name: obj.name, address: account.address(), keystore }\n      })\n    )\n    onSuccess()\n  }\n\n  return (\n    <>\n      <input\n        className=\"input\"\n        type=\"text\"\n        required\n        value={obj.name}\n        onChange={e => setObj({ ...obj, name: e.target.value })}\n        placeholder=\"Name(12 characters max)\"\n      />\n      <input\n        className=\"input\"\n        type=\"password\"\n        value={obj.pass}\n        onChange={e => setObj({ ...obj, pass: e.target.value })}\n        placeholder=\"Password\"\n      />\n      <input\n        className=\"input\"\n        type=\"password\"\n        value={obj.repass}\n        onChange={e => setObj({ ...obj, repass: e.target.value })}\n        onKeyPress={event => {\n          if (event.key === 'Enter') {\n            create()\n          }\n        }}\n        placeholder=\"Password confirmation\"\n      />\n      <button\n        className=\"button button-yellow margin-top-40\"\n        onClick={() => {\n          create()\n        }}\n      >\n        OK\n      </button>\n      {errMsg && <ErrorMessage msg={errMsg} />}\n      {sameAccount && (\n        <WarningMessage\n          msg={`Account ${sameAccount.name} has same address, and it will be overwritten by this account.`}\n        />\n      )}\n    </>\n  )\n}\n\nexport default NameAndPassword\n","import React from 'react'\nimport { useState } from 'react'\nimport { Account } from 'chainx.js'\nimport shuffle from 'lodash.shuffle'\nimport './createAccount.scss'\nimport StaticWarning from '../../components/StaticWarning'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport NameAndPassword from '../../components/NameAndPassword'\n\nfunction CreateAccount(props) {\n  const titleList = [\n    'New Account',\n    'Backup Mnemonic',\n    'Verify Mnemonic',\n    'Name and password setting'\n  ]\n  const subTitleList = [\n    '',\n    'Write down following mnemonic words, and will be used next step.',\n    'Mark the words one by one in the order last step shows.',\n    'Password contains at lease 8 characters, and at least one upper,lower and number case character.'\n  ]\n  const buttonTextList = ['Begin', 'Next', 'Next', 'OK']\n\n  const [currentStep, setCurrentStep] = useState(0)\n  const [errMsg, setErrMsg] = useState('')\n  const [mnemonic] = useState(Account.newMnemonic())\n  const mnemonicList = mnemonic.split(' ')\n  const [wordSelectedList, setWordSelectedList] = useState(\n    new Array(mnemonicList.length).fill(false)\n  )\n  const [shuffleMnemonicList] = useState(shuffle(mnemonicList))\n  const [validateMnemonicList, setValidateMnemonicList] = useState(\n    new Array(12).fill('')\n  )\n  const mnemonicWords = mnemonicList.map((item, index) => ({\n    value: item,\n    index: index\n  }))\n\n  const clearErrMsg = () => {\n    setErrMsg('')\n    return true\n  }\n\n  const checkMnemonic = () => {\n    if (mnemonic === validateMnemonicList.join(' ')) {\n      clearErrMsg()\n      return true\n    }\n    setErrMsg('Mnemonic not correct')\n    return false\n  }\n\n  return (\n    <div className=\"container create-account\">\n      <div className=\"create-account-title\">\n        <span>{titleList[currentStep]}</span>\n        <span className=\"create-account-sub-title\">\n          {subTitleList[currentStep]}\n        </span>\n      </div>\n      <div className=\"create-account-body\">\n        <div className=\"create-account-body-content\">\n          {currentStep === 0 && <StaticWarning title=\"Backup Mnemonic\" />}\n          {currentStep === 1 &&\n            mnemonicWords.map(item => (\n              <div className=\"word-item\" key={item.index}>\n                {item.value}\n              </div>\n            ))}\n          {currentStep === 2 &&\n            shuffleMnemonicList.map((item, index) => (\n              <div\n                className={\n                  'word-item word-item-click ' +\n                  (wordSelectedList[index] ? 'word-item-selected' : '')\n                }\n                key={index}\n                onClick={() => {\n                  const wordSelected = wordSelectedList[index]\n                  let wordIndex = validateMnemonicList.indexOf('')\n                  let replaceWord = item\n                  if (wordSelected) {\n                    // word has selected, remove last word\n                    wordIndex =\n                      11 -\n                      Array.from(validateMnemonicList)\n                        .reverse()\n                        .indexOf(item)\n                    replaceWord = ''\n                  }\n                  validateMnemonicList.splice(wordIndex, 1, replaceWord)\n                  setValidateMnemonicList(Array.from(validateMnemonicList))\n                  wordSelectedList.splice(index, 1, !wordSelected)\n                  setWordSelectedList(Array.from(wordSelectedList))\n                }}\n              >\n                {item}\n              </div>\n            ))}\n          {currentStep === 3 && (\n            <NameAndPassword\n              type=\"mnemonic\"\n              secret={mnemonic}\n              onSuccess={function() {\n                props.history.push('/')\n              }}\n            />\n          )}\n        </div>\n        {currentStep < 2 && (\n          <button\n            className=\"button button-yellow margin-top-40\"\n            onClick={() => {\n              if (currentStep < 2) {\n                setCurrentStep(s => s + 1)\n              }\n            }}\n          >\n            {buttonTextList[currentStep]}\n          </button>\n        )}\n        {currentStep === 2 && (\n          <div className=\"container-spacebetween margin-top-40\">\n            <button\n              className=\"button button-white-half\"\n              onClick={() => clearErrMsg() && setCurrentStep(s => s - 1)}\n            >\n              Pre\n            </button>\n            <button\n              className=\"button button-yellow-half\"\n              onClick={() => checkMnemonic() && setCurrentStep(s => s + 1)}\n            >\n              Next\n            </button>\n          </div>\n        )}\n        {currentStep > 1 ? errMsg ? <ErrorMessage msg={errMsg} /> : null : null}\n      </div>\n      {currentStep === 2 && (\n        <div className=\"validate-mnemonic-area\">\n          <div className=\"validate-mnemonic-area-container\">\n            {validateMnemonicList.map((item, index) => (\n              <span key={index}>{item}</span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default CreateAccount\n","import React, { useState } from 'react'\nimport './importAccount.scss'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport NameAndPassword from '../../components/NameAndPassword'\n\nfunction ImportAccount(props) {\n  const [currentStep, setCurrentStep] = useState(0)\n  const [currentTabIndex, setCurrentTabIndex] = useState(0)\n  const [pk, setPk] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const [mnemonicList, setMnemonicList] = useState(new Array(12).fill(''))\n\n  const titleList = [\n    ['Mnemonic', 'Private key'],\n    ['Password', 'Password']\n  ]\n  const subTitleList = [\n    ['Input mnemonic words', 'Input private key'],\n    ['', '']\n  ]\n\n  const checkStep1 = () => {\n    if (currentTabIndex === 0) {\n      if (mnemonicList.some(item => item === '')) {\n        setErrMsg('Mnemonic is not correct')\n        return\n      }\n    } else if (currentTabIndex === 1) {\n      if (!pk) {\n        setErrMsg('Private key is not correct')\n        return\n      }\n    }\n\n    setErrMsg('')\n    setCurrentStep(s => s + 1)\n  }\n\n  return (\n    <div className=\"container import-account\">\n      <div className=\"import-account-title\">\n        <div className=\"import-account-title-select\">\n          <span>{titleList[currentStep][currentTabIndex]}</span>\n          {currentStep === 0 ? (\n            <span\n              className=\"second-choice\"\n              onClick={() => {\n                setErrMsg('')\n                setCurrentTabIndex(1 - currentTabIndex)\n              }}\n            >\n              {titleList[currentStep][1 - currentTabIndex]}\n            </span>\n          ) : null}\n        </div>\n        <span className=\"import-account-sub-title\">\n          {subTitleList[currentStep][currentTabIndex]}\n        </span>\n      </div>\n      <div className=\"import-account-body\">\n        <div className=\"import-account-body-content\">\n          {currentStep === 0 ? (\n            currentTabIndex === 0 ? (\n              <div className=\"import-mnemonic\">\n                {mnemonicList.map((item, index) => (\n                  <input\n                    className=\"word-item\"\n                    key={index}\n                    value={mnemonicList[index]}\n                    onChange={e => {\n                      mnemonicList.splice(index, 1, e.target.value)\n                      setMnemonicList(Array.from(mnemonicList))\n                    }}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"import-private-key\">\n                <textarea\n                  value={pk}\n                  onChange={e => setPk(e.target.value)}\n                  onKeyPress={event => {\n                    if (event.key === 'Enter') {\n                      checkStep1()\n                    }\n                  }}\n                />\n              </div>\n            )\n          ) : null}\n          {currentStep === 1 && (\n            <NameAndPassword\n              type={currentTabIndex === 0 ? 'mnemonic' : 'pk'}\n              secret={\n                currentTabIndex === 0 ? mnemonicList.join(' ') : pk.trim()\n              }\n              onSuccess={function() {\n                props.history.push('/')\n              }}\n            />\n          )}\n        </div>\n        {currentStep === 0 && (\n          <button\n            className=\"button button-yellow margin-top-40\"\n            onClick={() => {\n              if (currentStep < 1) {\n                checkStep1()\n              }\n            }}\n          >\n            Next\n          </button>\n        )}\n        {errMsg ? <ErrorMessage msg={errMsg} /> : null}\n      </div>\n    </div>\n  )\n}\n\nexport default ImportAccount\n","import { stringCamelCase } from '@chainx/util'\nconst { Extrinsic: OriginExtrinsic } = require('@chainx/types')\n\nclass Extrinsic extends OriginExtrinsic {\n  get methodName() {\n    return this.meta.get('name').toString()\n  }\n\n  get argsArr() {\n    const args = []\n\n    const entries = this.method.get('args').entries()\n    for (let [name, value] of entries) {\n      args.push({ name, value })\n    }\n\n    return args\n  }\n}\n\nexport const parseData = data => {\n  const ex = new Extrinsic(data)\n  return [\n    stringCamelCase(ex.methodName),\n    ex.argsArr.map(item =>\n      ex.methodName === 'put_code' ? item.value : item.value.toString()\n    ),\n    ex.argsArr\n  ]\n}\n","import BigNumber from 'bignumber.js'\n\nexport default function toPrecision(value, precision = 0, showPrecision = 0) {\n  precision = Number(precision)\n  return new BigNumber(value)\n    .dividedBy(Math.pow(10, precision))\n    .toFixed(showPrecision || precision)\n}\n","export const pcxPrecision = 8\nexport const assetsModule = 'xAssets'\nexport const transferMethod = 'transfer'\n","import React from 'react'\nimport toPrecision from '../../shared/toPrecision'\nimport { pcxPrecision } from '../../shared/constants'\nimport { replaceBTC } from '../../shared/chainx'\n\nexport default function(props) {\n  const { query } = props\n\n  return (\n    <div className=\"detail\">\n      <div className=\"detail-amount\">\n        <span>Amount</span>\n        <span>\n          {toPrecision(query.args[2], pcxPrecision)} {replaceBTC(query.args[1])}\n        </span>\n      </div>\n      <div className=\"detail-item\">\n        <span>Dest</span>\n        <span>{query.args[0]}</span>\n      </div>\n      <div className=\"detail-item\">\n        <span>Memo</span>\n        <span>{query.args[3]}</span>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function(props) {\n  const { query } = props\n\n  return (\n    <div className=\"detail\">\n      <div className=\"detail-item\">\n        <span>Module</span>\n        <span>{query.module.toLowerCase()}</span>\n      </div>\n      <div className=\"detail-item\">\n        <span>Method</span>\n        <span>{query.method.replace(/([A-Z])/g, '_$1').toLowerCase()}</span>\n      </div>\n      <div className=\"detail-item\">\n        <span>Args</span>\n        <section className=\"args\">\n          <ol>\n            {(query.argsWithName || []).map((arg, index) => {\n              if (!arg) {\n                return null\n              }\n              return (\n                <li key={index}>\n                  <span className=\"arg-name\">{arg.name}: </span>\n                  <span className=\"arg-value\">\n                    {arg.value.toString().length > 10000\n                      ? '[object Object]'\n                      : arg.value.toString()}\n                  </span>\n                </li>\n              )\n            })}\n          </ol>\n        </section>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { pairsSelector } from '../../store/reducers/tradeSlice'\nimport toPrecision from '../../shared/toPrecision'\nimport { pcxPrecision } from '../../shared/constants'\nimport { replaceBTC } from '../../shared/chainx'\n\nexport default function(props) {\n  const { query } = props\n  const pairs = useSelector(pairsSelector)\n\n  const getPrecision = (id, type) => {\n    if (id === 0 && type === 'amount') {\n      return [pcxPrecision, pcxPrecision]\n    }\n    if (id === 0 && type === 'price') {\n      return [9, 7]\n    }\n    if (id === 1 && type === 'amount') {\n      return [3, 3]\n    }\n    if (id === 1 && type === 'price') {\n      return [4, 8]\n    } else {\n      return [pcxPrecision, pcxPrecision]\n    }\n  }\n\n  return (\n    <div className=\"detail\">\n      {query.method === 'putOrder' && (\n        <>\n          <div className=\"detail-amount\">\n            <span>Amount</span>\n            <span>\n              {query.args[2]}{' '}\n              {toPrecision(\n                query.args[3],\n                ...getPrecision(query.args[0], 'amount')\n              )}{' '}\n              {pairs[query.args[0]] && pairs[query.args[0]].assets}\n            </span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Price</span>\n            <span>\n              {toPrecision(\n                query.args[4],\n                ...getPrecision(query.args[0], 'price')\n              )}\n            </span>\n          </div>\n        </>\n      )}\n      {query.method === 'cancelOrder' && (\n        <div className=\"detail-item\">\n          <span>Id</span>\n          <span>{query.args[1]}</span>\n        </div>\n      )}\n      <div className=\"detail-item\">\n        <span>Trade pair</span>\n        <span>\n          {pairs[query.args[0]] &&\n            replaceBTC(pairs[query.args[0]].assets) +\n              '/' +\n              replaceBTC(pairs[query.args[0]].currency)}\n        </span>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport toPrecision from '../../shared/toPrecision'\nimport { pcxPrecision } from '../../shared/constants'\nimport { useSelector } from 'react-redux'\nimport { feeSelector } from '../../store/reducers/tradeSlice'\n\nexport default function(props) {\n  const { query } = props\n  const fee = useSelector(feeSelector)\n\n  return (\n    <div className=\"detail\">\n      {query.method === 'withdraw' && (\n        <>\n          <div className=\"detail-amount\">\n            <span>Amount</span>\n            <span>\n              {toPrecision(query.args[1], pcxPrecision)} {query.args[0]}\n            </span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Fee</span>\n            <span>\n              {toPrecision(fee, pcxPrecision)} {query.args[0]}\n            </span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Dest</span>\n            <span>{query.args[2]}</span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Memo</span>\n            <span>{query.args[3]}</span>\n          </div>\n        </>\n      )}\n      {query.method === 'revokeWithdraw' && (\n        <div className=\"detail-item\">\n          <span>Id</span>\n          <span>{query.args[0]}</span>\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { intentionsSelector } from '../../store/reducers/intentionSlice'\nimport toPrecision from '../../shared/toPrecision'\nimport { pcxPrecision } from '../../shared/constants'\nimport { getChainx, replaceBTC } from '../../shared/chainx'\n\nexport default function(props) {\n  const { query } = props\n  const intentions = useSelector(intentionsSelector)\n\n  const getPublicKey = address => {\n    console.log(address, typeof address)\n    const chainx = getChainx()\n    return chainx.account.decodeAddress(address)\n  }\n\n  return (\n    <div className=\"detail\">\n      {query.args.length > 2 ? (\n        <>\n          <div className=\"detail-amount\">\n            <span>Amount</span>\n            <span>\n              {toPrecision(query.args.slice(-2, -1), pcxPrecision)} PCX\n            </span>\n          </div>\n          {query.method === 'renominate' && (\n            <div className=\"detail-item\">\n              <span>From node</span>\n              <span>\n                {intentions && intentions[getPublicKey(query.args[0])]}\n              </span>\n            </div>\n          )}\n          <div className=\"detail-item\">\n            <span>Dest node</span>\n            <span>\n              {intentions &&\n                intentions[getPublicKey(query.args.slice(-3, -2)[0])]}\n            </span>\n          </div>\n          <div className=\"detail-item\">\n            <span>Memo</span>\n            <span>{query.args.slice(-1)}</span>\n          </div>\n        </>\n      ) : (\n        <>\n          {query.module === 'xTokens' && (\n            <div className=\"detail-item\">\n              <span>Token</span>\n              <span>{replaceBTC(query.args[0])}</span>\n            </div>\n          )}\n          {query.module === 'xStaking' && (\n            <div className=\"detail-item\">\n              <span>Node</span>\n              <span>\n                {intentions && intentions[getPublicKey(query.args[0])]}\n              </span>\n            </div>\n          )}\n          {query.method === 'unfreeze' && (\n            <div className=\"detail-item\">\n              <span>Id</span>\n              <span>{query.args[1]}</span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { getCurrentGas, getSignRequest } from '../../shared'\nimport { parseData } from '../../shared/extensionExtrinsic'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport './requestSign.scss'\nimport { DefaultButton, PrimaryButton, Slider } from '@chainx/ui'\nimport { setLoading } from '../../store/reducers/statusSlice'\nimport { fetchIntentions } from '../../store/reducers/intentionSlice'\nimport { fetchFee, fetchTradePairs } from '../../store/reducers/tradeSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Transfer from './Transfer'\nimport CommonTx from './CommonTx'\nimport Trade from './Trade'\nimport AssetsProcess from './AssetsProcess'\nimport Staking from './Staking'\nimport { currentChainxAccountSelector } from '../../store/reducers/accountSlice'\nimport { isTestNetSelector } from '../../store/reducers/settingSlice'\nimport { clearToSign } from '../../store/reducers/txSlice'\nimport { service } from '../../services/socketService'\n\nfunction RequestSign(props) {\n  const dispatch = useDispatch()\n  const [pass, setPass] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const [currentGas, setCurrentGas] = useState(0)\n  const [acceleration, setAcceleration] = useState(1)\n  const [txPanel, setTxPanel] = useState(null)\n  const [newQuery, setNewQuery] = useState(\n    Object.assign({}, props.location.query)\n  )\n  const isTestNet = useSelector(isTestNetSelector)\n  const currentAccount = useSelector(currentChainxAccountSelector)\n\n  const {\n    location: { query }\n  } = props\n\n  useEffect(() => {\n    parseQuery(isTestNet)\n    // eslint-disable-next-line\n  }, [isTestNet])\n\n  const check = () => {\n    if (!pass) {\n      setErrMsg('password is required')\n      return false\n    }\n    return true\n  }\n\n  const fetchRelevantInfo = isTestNet => {\n    if (newQuery.module === 'xStaking') {\n      dispatch(fetchIntentions(isTestNet))\n    }\n    if (newQuery.module === 'xSpot') {\n      dispatch(fetchTradePairs(isTestNet))\n    }\n    if (newQuery.module === 'xAssetsProcess') {\n      dispatch(fetchFee(isTestNet))\n    }\n  }\n\n  const parseQuery = isTestNet => {\n    if (!query) {\n      return\n    }\n    if (!query.module) {\n      const [method, args, argsWithName] = parseData(query.data)\n      newQuery.method = method\n      newQuery.argsWithName = argsWithName\n      newQuery.args = args\n      let module = ''\n      if (\n        ['nominate', 'renominate', 'unnominate', 'unfreeze', 'claim'].includes(\n          method\n        )\n      ) {\n        module = 'xStaking'\n        if (args.length === 1 && args[0].length < 6) {\n          module = 'xTokens'\n        }\n      } else if (['withdraw', 'revokeWithdraw'].includes(method)) {\n        module = 'xAssetsProcess'\n      } else if (['putOrder', 'cancelOrder'].includes(method)) {\n        module = 'xSpot'\n      } else if (['transfer'].includes(method)) {\n        module = 'xAssets'\n      } else {\n        module = 'xContracts'\n      }\n      newQuery.module = module\n      setNewQuery(newQuery)\n    }\n\n    updateTxPanel()\n    getCurrentGas(currentAccount, newQuery, setErrMsg, setCurrentGas)\n    fetchRelevantInfo(isTestNet)\n  }\n\n  const updateTxPanel = () => {\n    let _txPanel\n    if (newQuery.module === 'xAssets' && newQuery.method === 'transfer') {\n      _txPanel = <Transfer query={newQuery} />\n    } else if (newQuery.module === 'xSpot') {\n      _txPanel = <Trade query={newQuery} />\n    } else if (newQuery.module === 'xAssetsProcess') {\n      _txPanel = <AssetsProcess query={newQuery} />\n    } else if (['xStaking', 'xTokens'].includes(newQuery.module)) {\n      _txPanel = <Staking query={newQuery} />\n    } else {\n      _txPanel = <CommonTx query={newQuery} />\n    }\n    setTxPanel(_txPanel)\n  }\n\n  const sign = async () => {\n    setErrMsg('')\n    if (!currentAccount || !currentAccount.address) {\n      setErrMsg(`Error: address is not exist`)\n      return\n    }\n    if (!check()) {\n      return\n    }\n    if (currentAccount.address !== query.address) {\n      setErrMsg('Invalid address')\n      return\n    }\n\n    dispatch(setLoading(true))\n    try {\n      await getSignRequest(pass, acceleration)\n      setErrMsg('')\n      dispatch(setLoading(false))\n      removeCurrentSign()\n      props.history.push('/')\n    } catch (e) {\n      dispatch(setLoading(false))\n      setErrMsg(`Error: ${e.message}`)\n    }\n  }\n\n  window.onbeforeunload = function() {\n    removeCurrentSign()\n  }\n\n  const cancel = () => {\n    removeCurrentSign()\n\n    // 通知dapp拒绝签名\n    const { origin, id, dataId } = query\n    service.emit(origin, id, 'api', {\n      id: dataId,\n      result: { reject: true }\n    })\n  }\n\n  const removeCurrentSign = () => {\n    try {\n      dispatch(clearToSign())\n    } catch (e) {\n      console.log(e)\n      // window.close()\n    } finally {\n      props.history.push('/')\n    }\n  }\n\n  const getCurrentGasText = () => {\n    return (acceleration * currentGas) / 10 ** 8 + ' PCX'\n  }\n\n  // xStaking\n  // 投票，切换投票，赎回，解冻，提息\n  // nominate, renominate, unnominate, unfreeze, claim\n  // 切换投票页面不一样\n  // this.api.tx.xStaking.nominate(target, value, memo);\n  // this.api.tx.xStaking.renominate(from, to, value, memo);\n  // this.api.tx.xStaking.unnominate(target, value, memo);\n  // this.api.tx.xStaking.unfreeze(target, revocationIndex);\n  // this.api.tx.xStaking.claim(target);\n\n  // xAssetsProcess(Asset.js)\n  // 提现，取消提现\n  // withdraw, revokeWithdraw\n  // this.api.tx.xAssetsProcess.withdraw(token, value, addr, ext);\n  // this.api.tx.xAssetsProcess.revokeWithdraw(id);\n\n  // xSpot(Trade.js)\n  // 挂单，撤单\n  // putOrder, cancelOrder\n  // this.api.tx.xSpot.putOrder(pairid, ordertype, direction, amount, price);\n  // this.api.tx.xSpot.cancelOrder(pairid, index);\n\n  const marks = [\n    {\n      value: 1,\n      label: '1x'\n    },\n    {\n      value: 10,\n      label: '10x'\n    }\n  ]\n\n  if (!query) {\n    return <></>\n  }\n\n  return (\n    <div className=\"container request-sign\">\n      <div className=\"tx-panel\">{txPanel}</div>\n      <div className=\"adjust-gas\">\n        <div className=\"adjust-gas-desc\">\n          <div>\n            <span>Fee</span>\n            <span className=\"yellow\">{getCurrentGasText()}</span>\n          </div>\n          <span>More fee, faster speed</span>\n        </div>\n        <Slider\n          defaultValue={acceleration}\n          onChange={v => setAcceleration(v)}\n          // getAriaValueText={valuetext}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          step={1}\n          marks={marks}\n          min={1}\n          max={10}\n        />\n      </div>\n      <div className=\"submit-area\">\n        <div className=\"title\">\n          <span>Input password</span>\n        </div>\n        <input\n          value={pass}\n          onChange={e => setPass(e.target.value)}\n          onKeyPress={event => {\n            if (event.key === 'Enter') {\n              sign()\n            }\n          }}\n          className=\"input\"\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <ErrorMessage msg={errMsg} />\n        <div className=\"button-area margin-top-40\">\n          <DefaultButton size=\"large\" onClick={cancel}>\n            Cancel\n          </DefaultButton>\n          <PrimaryButton size=\"large\" onClick={() => sign()}>\n            Sign\n          </PrimaryButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RequestSign\n","import React from 'react'\nimport './showPrivateKey.scss'\nimport StaticWarning from '../../components/StaticWarning'\n\nfunction ShowPrivateKey(props) {\n  return (\n    <div className=\"show-private-key\">\n      <span className=\"title\">Private Key</span>\n      <StaticWarning desc=\"Do not store your private key in your PC or network. Anybody with your private key will take your asseets.\" />\n      <div className=\"pk\">\n        <span className=\"span-center-wrap\">{props.location.query.pk}</span>\n      </div>\n    </div>\n  )\n}\n\nexport default ShowPrivateKey\n","import React from 'react'\nimport { useState } from 'react'\nimport { Account } from 'chainx.js'\nimport './enterPassword.scss'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  isTestNetSelector,\n  networkSelector\n} from '../../store/reducers/settingSlice'\nimport { removeAccount } from '../../store/reducers/accountSlice'\n\nfunction EnterPassword(props) {\n  const [pass, setPass] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const isTestNet = useSelector(isTestNetSelector)\n  const dispatch = useDispatch()\n  const chainId = useSelector(networkSelector)\n\n  async function exportPk(keystore, password) {\n    try {\n      const pk = Account.fromKeyStore(keystore, password).privateKey()\n      props.history.push({\n        pathname: '/showPrivateKey',\n        query: { pk: pk }\n      })\n    } catch (error) {\n      setErrMsg(error.message)\n    }\n  }\n\n  async function _removeAccount(address, password, keystore) {\n    try {\n      Account.setNet(isTestNet ? 'testnet' : 'mainnet')\n      Account.fromKeyStore(keystore, password)\n      dispatch(removeAccount({ address, chainId }))\n      props.history.push('/')\n    } catch (error) {\n      setErrMsg(error.message)\n    }\n  }\n\n  const enter = async function() {\n    if (pass) {\n      const address = props.location.query.address\n      const keystore = props.location.query.keystore\n      const type = props.location.query.type\n      if (type === 'export') {\n        exportPk(keystore, pass)\n      } else if (type === 'remove') {\n        _removeAccount(address, pass, keystore)\n      }\n    }\n  }\n\n  return (\n    <div className=\"enter-password\">\n      <span className=\"title\">Input password</span>\n      <input\n        className=\"input\"\n        type=\"password\"\n        value={pass}\n        onChange={e => setPass(e.target.value)}\n        onKeyPress={event => {\n          if (event.key === 'Enter') {\n            enter()\n          }\n        }}\n        placeholder=\"Password\"\n      />\n      <button\n        className=\"button button-yellow margin-top-40\"\n        onClick={() => enter()}\n      >\n        Confirm\n      </button>\n      {errMsg ? <ErrorMessage msg={errMsg} /> : null}\n    </div>\n  )\n}\n\nexport default EnterPassword\n","import React, { useState } from 'react'\nimport ErrorMessage from '../../components/ErrorMessage'\nimport {\n  chainxNodesSelector,\n  addNode,\n  removeNode,\n  setNodeDelay\n} from '../../store/reducers/nodeSlice'\nimport { networkSelector } from '../../store/reducers/settingSlice'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './nodeAction.scss'\nimport getDelay from '../../shared/updateNodeStatus'\n\nfunction AddNode(props) {\n  const [name, setName] = useState('')\n  const [url, setUrl] = useState('')\n  const [errMsg, setErrMsg] = useState('')\n  const nodeList = useSelector(chainxNodesSelector)\n  const chainId = useSelector(networkSelector)\n  const dispatch = useDispatch()\n\n  const {\n    location: { query }\n  } = props\n\n  let action = ''\n  let title = 'Add node'\n  if (query && query.type === 'edit') {\n    action = 'edit'\n    title = 'Edit node'\n  } else if (query && query.type === 'remove') {\n    action = 'remove'\n    title = 'Delete node'\n  }\n\n  const check = () => {\n    if (!name || !url) {\n      setErrMsg('name and url are required')\n      return false\n    }\n    return true\n  }\n\n  const enter = async () => {\n    if (!check()) {\n      return\n    }\n    try {\n      dispatch(addNode({ chainId, node: { name, url } }))\n      getDelay(nodeList, chainId, dispatch, setNodeDelay)\n      setErrMsg('')\n      props.history.push('/')\n    } catch (error) {\n      setErrMsg(error.message)\n    }\n  }\n\n  const deleteNode = async (name, url) => {\n    if (nodeList.length < 2) {\n      setErrMsg('can not remove the last node')\n      return\n    }\n    try {\n      dispatch(removeNode({ chainId, url }))\n      getDelay(nodeList, chainId, dispatch, setNodeDelay)\n      setErrMsg('')\n      props.history.push('/')\n    } catch (error) {\n      setErrMsg(error.message)\n    }\n  }\n\n  return (\n    <div className=\"node-action\">\n      <span className=\"title\">{title}</span>\n      {action !== 'remove' ? (\n        <>\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n            placeholder=\"Name(12 characters max)\"\n          />\n          <span className=\"node-url\">Node address</span>\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={url}\n            onChange={e => setUrl(e.target.value)}\n            onKeyPress={event => {\n              if (event.key === 'Enter') {\n                enter()\n              }\n            }}\n            placeholder=\"wss://w1.chainx.org/ws\"\n          />\n          <button\n            className=\"button button-yellow margin-top-40\"\n            onClick={() => enter()}\n          >\n            Confirm\n          </button>\n        </>\n      ) : (\n        <button\n          className=\"button button-white margin-top-16\"\n          onClick={() => {\n            deleteNode(query.nodeInfo.name, query.nodeInfo.url)\n          }}\n        >\n          Delete\n        </button>\n      )}\n      {errMsg ? <ErrorMessage msg={errMsg} /> : null}\n    </div>\n  )\n}\n\nexport default AddNode\n","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Redirect, Route, Switch } from 'react-router'\nimport Home from './Home'\nimport Header from './Header'\nimport CreateAccount from './CreateAccount'\nimport ImportAccount from './ImportAccount'\nimport RequestSign from './RequestSign'\nimport ShowPrivateKey from './ShowPrivateKey/index'\nimport EnterPassword from './EnterPassword'\nimport NodeAction from './NodeAction'\nimport { setChainx } from '../shared'\nimport spinner from '../assets/loading.gif'\nimport './index.scss'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setInitLoading } from '../store/reducers/statusSlice'\nimport { currentChainxNodeSelector } from '../store/reducers/nodeSlice'\n\nimport {\n  handleApiResponse,\n  handlePairedResponse,\n  setService\n} from '../services/socketService'\n\nwindow.wallet.socketResponse = data => {\n  if (typeof data === 'string') data = JSON.parse(data)\n  switch (data.type) {\n    case 'api':\n      return handleApiResponse(data.request, data.id)\n    case 'pair':\n      return handlePairedResponse(data.request, data.id)\n    default:\n      return\n  }\n}\n\nsetService(window.sockets)\n\nwindow.sockets.initialize().then(() => console.log('sockets initialized'))\n\nexport default function App() {\n  let redirectUrl = '/'\n\n  const dispatch = useDispatch()\n  const loading = useSelector(state => state.status.loading)\n  const initLoading = useSelector(state => state.status.initLoading)\n  const currentNode = useSelector(currentChainxNodeSelector)\n\n  const state = useSelector(state => state)\n  console.log('state', state)\n\n  useEffect(() => {\n    getSetting()\n    // eslint-disable-next-line\n  }, [])\n\n  const sleep = time => {\n    return new Promise(resolve => {\n      setTimeout(resolve, time)\n    })\n  }\n\n  const getSetting = async () => {\n    Promise.race([setChainx(currentNode.url), sleep(3000)])\n      .catch(e => {\n        console.log(`set Chainx catch error: ${e}`)\n      })\n      .finally(() => {\n        dispatch(setInitLoading(false))\n      })\n  }\n\n  return (\n    <Router>\n      <React.Fragment>\n        <Header props />\n        {(loading || initLoading) && (\n          <div className=\"spinner\">\n            <img src={spinner} alt=\"spinner\" />\n          </div>\n        )}\n        {!initLoading && (\n          <div className=\"content\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/createAccount\" component={CreateAccount} />\n              <Route path=\"/importAccount\" component={ImportAccount} />\n              <Route path=\"/requestSign/:id?\" component={RequestSign} />\n              <Route path=\"/showPrivateKey\" component={ShowPrivateKey} />\n              <Route path=\"/enterPassword\" component={EnterPassword} />\n              <Route path=\"/addNode\" component={NodeAction} />\n              <Redirect to={redirectUrl} />\n            </Switch>\n          </div>\n        )}\n      </React.Fragment>\n    </Router>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './pages/App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","module.exports = __webpack_public_path__ + \"static/media/extension_logo.329f2527.svg\";","module.exports = __webpack_public_path__ + \"static/media/testnet.3a02305f.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch.58939fba.svg\";","module.exports = __webpack_public_path__ + \"static/media/warning.e4f3512f.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.0adb93ce.gif\";"],"sourceRoot":""}